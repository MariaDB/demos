{"url": "https://mariadb.com/kb/en/vector-overview/", "title": "Vector Overview", "content": "##### MariaDB starting with 11.7.1\n\nVectors were introduced in MariaDB 11.7.1\n\nMariaDB Vector is a feature that allows MariaDB Server to perform as a relational vector database. Vectors generated by your favourite AI model can be stored and searched for in MariaDB.\n\nThe initial implementation uses the modified HNSW algorithm for searching in the vector index (to solve the so-called Approximate Nearest Neighbor problem), and defaults to Euclidean distance.\n\n## Creating\n\nVectors are defined using VECTOR INDEX for the index definition in the CREATE TABLE statement. \nFor now, for testing purposes, avoid the CREATE VECTOR INDEX statement, which hasn't been fully implemented. Declare the index as a part of your CREATE TABLE statement:\n\n```\nCREATE TABLE v ( id INT PRIMARY KEY , v VECTOR ( 5 ) NOT NULL , VECTOR INDEX ( v ) );\n```\n\n## Inserting\n\nVector columns store 32-bit IEEE 754 floating point numbers .\n\n```\nINSERT INTO v VALUES ( 1 , x 'e360d63ebe554f3fcdbc523f4522193f5236083d' ), ( 2 , x 'f511303f72224a3fdd05fe3eb22a133ffae86a3f' ), ( 3 , x 'f09baa3ea172763f123def3e0c7fe53e288bf33e' ), ( 4 , x 'b97a523f2a193e3eb4f62e3f2d23583e9dd60d3f' ), ( 5 , x 'f7c5df3e984b2b3e65e59d3d7376db3eac63773e' ), ( 6 , x 'de01453ffa486d3f10aa4d3fdd66813c71cb163f' ), ( 7 , x '76edfc3e4b57243f10f8423fb158713f020bda3e' ), ( 8 , x '56926c3fdf098d3e2c8c5e3d1ad4953daa9d0b3e' ), ( 9 , x '7b713f3e5258323f80d1113d673b2b3f66e3583f' ), ( 10 , x '6ca1d43e9df91b3fe580da3e1c247d3f147cf33e' );\n```\n\nAlternatively one can use VEC_FromText() function:\n\n```\nINSERT INTO v VALUES ( 1 , Vec_FromText ( '[0.418708,0.809902,0.823193,0.598179,0.0332549]' )), ( 2 , Vec_FromText ( '[0.687774,0.789588,0.496138,0.57487,0.917617]' )), ( 3 , Vec_FromText ( '[0.333221,0.962687,0.467263,0.448235,0.475671]' )), ( 4 , Vec_FromText ( '[0.822185,0.185643,0.683452,0.211072,0.554056]' )), ( 5 , Vec_FromText ( '[0.437057,0.167281,0.0770977,0.428638,0.241591]' )), ( 6 , Vec_FromText ( '[0.76956,0.926895,0.803376,0.0157961,0.589042]' )), ( 7 , Vec_FromText ( '[0.493999,0.641957,0.761598,0.94276,0.425865]' )), ( 8 , Vec_FromText ( '[0.924108,0.275466,0.0543329,0.0731585,0.136344]' )), ( 9 , Vec_FromText ( '[0.186956,0.69666,0.0356002,0.668875,0.84722]' )), ( 10 , Vec_FromText ( '[0.415294,0.609278,0.426765,0.988832,0.475556]' ));\n```\n\n## Querying\n\nVEC_DISTANCE_EUCLIDEAN is a function that calculates a Euclidean (L2) distance between two points.\n\n```\nSELECT id FROM v ORDER BY VEC_DISTANCE_EUCLIDEAN ( v , x '6ca1d43e9df91b3fe580da3e1c247d3f147cf33e' ); + ----+ | id | + ----+ | 10 | | 7 | | 3 | | 9 | | 2 | | 1 | | 5 | | 4 | | 6 | | 8 | + ----+\n```\n\nMost commonly, this kind of query is done with a limit, for example to return vectors that are closest to a given vector, such as from a user search query, image or a song fragment.\n\n```\nSELECT id FROM v ORDER BY VEC_Distance ( v , x '6ca1d43e9df91b3fe580da3e1c247d3f147cf33e' ) LIMIT 2 ; + ----+ | id | + ----+ | 10 | | 7 | + ----+\n```\n\n## System Variables\n\nThere are a number of system variables used for vectors:\n\n- mhnsw_max_cache_size — upper limit for one MHNSW vector index cache.\n\n- mhnsw_default_distance — default value for the DISTANCE vector index option.\n\n- mhnsw_default_m — default value for the M vector index option.\n\n- mhnsw_ef_search — Defines the minimal number of result candidates to look for in the vector index for ORDER BY ... LIMIT N queries. The search will never search for less rows than that, even if LIMIT is smaller.\n\n## See Also\n\n- MariaDB Vector: A storage engine for LLMs - Kaj Arnö and Jonah Harris (video)\n\n- AI first applications with MariaDB Vector - Vicentiu Ciorbaru (video)"}
{"url": "https://mariadb.com/kb/en/what-is-mariadb-galera-cluster/", "title": "What is MariaDB Galera Cluster?", "content": "The most recent release of MariaDB 11.4 is: MariaDB 11.4.4 Stable (GA) Download Now Alternate download from mariadb.org\n\n### Contents\n\n- About\n\n- Features\n\n- Benefits\n\n- Galera Versions Galera 4 Versions Galera 3 Versions\n\n- Galera 4 Versions\n\n- Galera 3 Versions\n\n- See Also\n\n## About\n\n\n\nMariaDB Galera Cluster is a virtually synchronous multi-primary cluster for MariaDB. It is available on Linux only, and only supports the InnoDB storage engine (although there is\nexperimental support for MyISAM and, from MariaDB 10.6 , Aria . See the wsrep_replicate_myisam system variable, or, from MariaDB 10.6 , the wsrep_mode system variable).\n\n## Features\n\n- Virtually synchronous replication\n\n- Active-active multi-primary topology\n\n- Read and write to any cluster node\n\n- Automatic membership control, failed nodes drop from the cluster\n\n- Automatic node joining\n\n- True parallel replication, on row level\n\n- Direct client connections, native MariaDB look & feel\n\n## Benefits\n\nThe above features yield several benefits for a DBMS clustering solution, including:\n\n- No replica lag\n\n- No lost transactions\n\n- Read scalability\n\n- Smaller client latencies\n\nThe Getting Started with MariaDB\nGalera Cluster page has instructions on how to get up and running with\nMariaDB Galera Cluster.\n\nA great resource for Galera users is Codership on Google Groups ( codership-team 'at' googlegroups (dot) com ) - If you use Galera it is recommended you subscribe.\n\n## Galera Versions\n\nMariaDB Galera Cluster is powered by:\n\n- MariaDB Server.\n\n- The Galera wsrep provider library .\n\nThe functionality of MariaDB Galera Cluster can be obtained by installing the standard MariaDB Server packages and the Galera wsrep provider library package. The following Galera version corresponds to each MariaDB Server version:\n\n- In MariaDB 10.4 and later, MariaDB Galera Cluster uses Galera 4. This means that the wsrep API version is 26 and the Galera wsrep provider library is version 4.X.\n\n- In MariaDB 10.3 and before, MariaDB Galera Cluster uses Galera 3. This means that the wsrep API is version 25 and the Galera wsrep provider library is version 3.X.\n\nSee Deciphering Galera Version Numbers for more information about how to interpret these version numbers.\n\n### Galera 4 Versions\n\nThe following table lists each version of the Galera 4 wsrep provider, and it lists which version of MariaDB each one was first released in. If you would like to install Galera 4 using yum , apt , or zypper , then the package is called galera-4 .\n\n### Galera 3 Versions\n\nThe following table lists each version of the Galera 3 wsrep provider, and it lists which version of MariaDB each one was first released in. If you would like to install Galera 3 using yum , apt , or zypper , then the package is called galera .\n\n## See Also\n\n- Codership on Google Groups ( codership-team 'at' googlegroups (dot) com ) - A great mailing list for Galera users.\n\n- About Galera Replication\n\n- Codership: Using Galera Cluster\n\n- Galera Use Cases\n\n- Getting Started with MariaDB Galera Cluster\n\n- MariaDB Galera Cluster - Known Limitations"}
{"url": "https://mariadb.com/kb/en/mariadb-vs-mysql-compatibility/", "title": "MariaDB versus MySQL: Compatibility", "content": "See also MariaDB vs MySQL - Features\n\n### Contents\n\n- Replacement for MySQL Drop-in Compatibility of Specific MariaDB Versions\n\n- Drop-in Compatibility of Specific MariaDB Versions\n\n- Replication Compatibility MySQL 5.7 MySQL 8.0\n\n- MySQL 5.7\n\n- MySQL 8.0\n\n- Incompatibilities between Currently Maintained MariaDB Versions and MySQL Incompatibilities between MariaDB Rolling and MySQL 8.0 Incompatibilities between MariaDB 11.4 and MySQL 8.0 Incompatibilities between MariaDB 11.2 and MySQL 8.0 Incompatibilities between MariaDB 10.11 and MySQL 8.0 Incompatibilities between MariaDB 10.6 and MySQL 8.0 Incompatibilities between MariaDB 10.5 and MySQL 8.0\n\n- Incompatibilities between MariaDB Rolling and MySQL 8.0\n\n- Incompatibilities between MariaDB 11.4 and MySQL 8.0\n\n- Incompatibilities between MariaDB 11.2 and MySQL 8.0\n\n- Incompatibilities between MariaDB 10.11 and MySQL 8.0\n\n- Incompatibilities between MariaDB 10.6 and MySQL 8.0\n\n- Incompatibilities between MariaDB 10.5 and MySQL 8.0\n\n- Incompatibilities between Unmaintained MariaDB Versions and MySQL Incompatibilities between MariaDB 10.1 and MySQL 5.7 Incompatibilities between MariaDB 10.0 and MySQL 5.6 Incompatibilities between MariaDB 5.5 and MySQL 5.5 Incompatibilities between MariaDB 5.3 and MySQL 5.1 Incompatibilities between MariaDB 5.2 and MySQL 5.1 Incompatibilities between MariaDB 5.1 and MySQL 5.1\n\n- Incompatibilities between MariaDB 10.1 and MySQL 5.7\n\n- Incompatibilities between MariaDB 10.0 and MySQL 5.6\n\n- Incompatibilities between MariaDB 5.5 and MySQL 5.5\n\n- Incompatibilities between MariaDB 5.3 and MySQL 5.1\n\n- Incompatibilities between MariaDB 5.2 and MySQL 5.1\n\n- Incompatibilities between MariaDB 5.1 and MySQL 5.1\n\n- Old, Unsupported Configuration Options\n\n- Replacing a MySQL RPM\n\n- Incompatibilities between MariaDB and MySQL-Proxy\n\n- Related Links\n\n## Replacement for MySQL\n\nUntil MariaDB 5.5 , MariaDB versions functioned as a \"drop-in replacement\" for the equivalent MySQL version, with some limitations. From MariaDB 10.0 , it is usually still very easy to upgrade from MySQL.\n\n- MariaDB's data files are generally binary compatible with those from the equivalent MySQL version. All filenames and paths are generally the same. Data and table definition files (.frm) files are binary compatible. See note below for an incompatibility with views!\n\n- All filenames and paths are generally the same.\n\n- Data and table definition files (.frm) files are binary compatible.\n\n- See note below for an incompatibility with views!\n\n- MariaDB's client protocol is binary compatible with MySQL's client protocol. All client APIs and structs are identical. All ports and sockets are generally the same. All MySQL connectors (PHP, Perl, Python, Java, .NET, MyODBC, Ruby, MySQL C\n  connector etc) work unchanged with MariaDB. There are some installation issues with PHP5 that you should be aware of (a bug in how the old PHP5 client checks library\n   compatibility).\n\n- All client APIs and structs are identical.\n\n- All ports and sockets are generally the same.\n\n- All MySQL connectors (PHP, Perl, Python, Java, .NET, MyODBC, Ruby, MySQL C\n  connector etc) work unchanged with MariaDB.\n\n- There are some installation issues with PHP5 that you should be aware of (a bug in how the old PHP5 client checks library\n   compatibility).\n\nThis means that for many cases, you can just uninstall MySQL and install MariaDB and you are good to go. There is not generally any need to convert any data files.\n\nHowever, you must still run mysql_upgrade to finish the upgrade. This is needed to ensure that your mysql privilege and event tables are updated with the new fields MariaDB uses.\n\nThat said, MariaDB has a lot of new options, extension, storage engines and bug fixes that are not in MySQL. You can find the feature set for the different MariaDB\nversions on the What is in the different MariaDB Releases page.\n\n### Drop-in Compatibility of Specific MariaDB Versions\n\nMariaDB 10.2 , MariaDB 10.3 , and MariaDB 10.4 function as limited drop-in replacements for MySQL 5.7, as far as InnoDB is concerned. However, the implementation differences continue to grow in each new MariaDB version.\n\nMariaDB 10.0 and MariaDB 10.1 function as limited drop-in replacements for MySQL 5.6, as far as InnoDB is concerned. However, there are some implementation differences in some features.\n\nMariaDB 5.5 functions as a drop-in replacement for MySQL 5.5.\n\nMariaDB 5.1 , MariaDB 5.2 , and MariaDB 5.3 function as drop-in replacements for MySQL 5.1.\n\n## Replication Compatibility\n\nReplication compatibility depends on:\n\n- The MariaDB Server version\n\n- The MySQL Server version\n\n- The role of each server\n\nReplication compatibility details are described below for each MySQL version that is still maintained.\n\nFor replication compatibility details between MariaDB versions, see Cross-Version Replication Compatibility .\n\n### MySQL 5.7\n\nMariaDB Server 10.2 and later can replicate from a MySQL 5.7 primary server.\n\nMariaDB Server does not support the MySQL implementation of Global Transaction IDs (GTIDs), so the MariaDB replica server must use the binary log file and position for replication. If GTID mode is enabled on the MySQL primary server, the MariaDB replica server will remove the MySQL GTID events and replace them with MariaDB GTID events.\n\nAlthough MariaDB Server and MySQL 5.7 are compatible at the replication level, they may have some incompatibilities at the SQL (detailed below). Those differences can cause replication failures in some cases. To decrease the risk of compatibility issues, it is recommended to set binlog_format to ROW . When you want to replicate from MySQL 5.7 to MariaDB Server, it is recommended to test your application, so that any compatibility issues can be found and fixed.\n\nMariaDB can't make any claims about whether a MySQL 5.7 replica server can replicate from a MariaDB primary server.\n\n### MySQL 8.0\n\nMariaDB Server cannot replicate from a MySQL 8.0 primary server, because MySQL 8.0 has a binary log format that is incompatible.\n\n## Incompatibilities between Currently Maintained MariaDB Versions and MySQL\n\n### Incompatibilities between MariaDB Rolling and MySQL 8.0\n\n- Function Differences Between MariaDB Rolling and MySQL 8.0\n\n- System Variable Differences Between MariaDB Rolling and MySQL 8.0\n\n### Incompatibilities between MariaDB 11.4 and MySQL 8.0\n\n- See Incompatibilities and Feature Differences Between MariaDB 11.4 and MySQL 8.0 for details.\n\n- Function Differences Between MariaDB 11.4 and MySQL 8.0\n\n- System Variable Differences Between MariaDB 11.4 and MySQL 8.0\n\n### Incompatibilities between MariaDB 11.2 and MySQL 8.0\n\n- See Incompatibilities and Feature Differences Between MariaDB 11.2 and MySQL 8.0 for details.\n\n- Function Differences Between MariaDB 11.2 and MySQL 8.0\n\n- System Variable Differences Between MariaDB 11.2 and MySQL 8.0\n\n### Incompatibilities between MariaDB 10.11 and MySQL 8.0\n\n- See Incompatibilities and Feature Differences Between MariaDB 10.11 and MySQL 8.0 for details.\n\n- Function Differences Between MariaDB 10.11 and MySQL 8.0\n\n- System Variable Differences Between MariaDB 10.11 and MySQL 8.0\n\n### Incompatibilities between MariaDB 10.6 and MySQL 8.0\n\n- See Incompatibilities and Feature Differences Between MariaDB 10.6 and MySQL 8.0 for details.\n\n- Function Differences Between MariaDB 10.6 and MySQL 8.0\n\n- System Variable Differences Between MariaDB 10.6 and MySQL 8.0\n\n### Incompatibilities between MariaDB 10.5 and MySQL 8.0\n\n- See Incompatibilities and Feature Differences Between MariaDB 10.5 and MySQL 8.0 for details.\n\n- Function Differences Between MariaDB 10.5 and MySQL 8.0\n\n- System Variable Differences Between MariaDB 10.5 and MySQL 8.0\n\n## Incompatibilities between Unmaintained MariaDB Versions and MySQL\n\nFor unmaintained versions, see:\n\n- Incompatibilities and Feature Differences Between MariaDB and MySQL - Unmaintained Series\n\n- Function Differences Between MariaDB and MySQL - Unmaintained Series\n\n- System Variable Differences Between MariaDB and MySQL - Unmaintained Series\n\n### Incompatibilities between MariaDB 10.1 and MySQL 5.7\n\n- MariaDB 10.1 and above does not support MySQL 5.7's packed JSON objects.  MariaDB follows the SQL standard and stores the JSON as a normal TEXT/BLOB.  If you want to replicate JSON columns from MySQL to MariaDB, you should store JSON objects in MySQL in a TEXT column or use statement based replication.  If you are using JSON columns and want to upgrade to MariaDB, you can either convert the JSON columns to TEXT or use mysqldump to copy these tables to MariaDB. In MySQL, JSON is compared according to json values. In MariaDB JSON strings are normal strings and compared as strings.\n\n- MariaDB 10.1 's InnoDB encryption is implemented differently than MySQL 5.7's InnoDB encryption.\n\n- MariaDB 10.1 does not support the ngram and MeCab full-text parser plugins - MDEV-10267 , MDEV-10268 .\n\n- MariaDB 10.1 does not support multiple triggers for a table - MDEV-6112 . This is fixed in MariaDB 10.2\n\n- MariaDB 10.1 does not support CREATE TABLESPACE for InnoDB.\n\n- MariaDB 10.1 does not support MySQL 5.7's “native” InnoDB partitioning handler. Fixed  in MariaDB 10.6.15 .\n\n- MariaDB does not support MySQL 5.7's X protocol.\n\n- MariaDB 10.1 does not support the use of multiple triggers of the same type for a table.  This feature was introduced in MariaDB 10.2.2 .\n\n- MariaDB 10.1 does not support MySQL 5.7's transportable tablespaces for partitioned InnoDB tables.  ALTER TABLE ... {DISCARD|IMPORT} PARTITION is not supported. For a workaround see the following blog post .\n\n- MariaDB 10.1 does not support MySQL 5.7's online undo tablespace truncation.  However, this feature was added to MariaDB 10.2 .\n\n- MySQL 5.7 features a new implementation of the performance_schema and a sys schema wrapper.  These are not yet supported in MariaDB.\n\n- MySQL 5.7 adds multi-source replication and replication channels. Multi-source replication was added to MariaDB previously, in MariaDB 10.0 , and uses a different syntax.\n\n- MySQL 5.7 adds group replication.  This feature is incompatible with MariaDB's galera-cluster replication.\n\n- MariaDB 10.1 does not support MySQL 5.7's, ACCOUNT LOCK/UNLOCK synax for CREATE USER and ALTER USER statements.\n\n- MariaDB 10.1 does not support MySQL 5.7's ALTER TABLE...RENAME INDEX statements.\n\n- MariaDB 10.1 does not support MySQL 5.7's STACKED operation for GET DIAGNOSTICS statements.\n\n- MariaDB 10.1 does not support MySQL 5.7's {WITH|WITHOUT} VALIDATION syntax for ALTER TABLE.. EXCHANGE PARTITION statements.\n\n- MariaDB does not support the optional init_vector argument for AES_ENCRYPT and AES_DECRYPT or the block_encryption_mode variable - MDEV-9069\n\n- MariaDB does not support the --initialize option. Use mysql_install_db instead. - MDEV-19010\n\n- Also see Incompatibilities between MariaDB 10.0 and MySQL 5.6.\n\n- Also see a detailed breakdown of System variable differences between MariaDB 10.1and MySQL 5.7 .\n\n### Incompatibilities between MariaDB 10.0 and MySQL 5.6\n\n- MySQL does not support MariaDB's Spider Storage Engine .\n\n- All MySQL binaries ( mysqld , myisamchk etc.) give a warning if one uses a prefix of an option (such as --big-table instead of --big-tables ). MariaDB binaries work in the same way as most other Unix commands and don't give warnings when using unique prefixes.\n\n- MariaDB GTID is not compatible with MySQL 5.6.  This means that one can't have MySQL 5.6 as a slave for MariaDB 10.0 . However MariaDB 10.0 can be a slave of MySQL 5.6 or any earlier MySQL/MariaDB version. Note that MariaDB and MySQL also have different GTID system variables , so these need to be adjusted when migrating.\n\n- MariaDB 10.0 multi-source replication is not supported in MySQL 5.6.\n\n- To make CREATE TABLE ... SELECT work the same way in statement based and row based replication it's by default executed as CREATE OR REPLACE TABLE on the slave.  One benefit of this is that if the slave dies in the middle of CREATE ... SELECT it will be able to continue. One can use the slave-ddl-exec-mode variable to specify how CREATE TABLE and DROP TABLE is replicated.\n\n- One can use the slave-ddl-exec-mode variable to specify how CREATE TABLE and DROP TABLE is replicated.\n\n- See also a detailed breakdown of System variable differences between MariaDB 10.0 and MySQL 5.6 .\n\n- MySQL 5.6 has performance schema enabled by default. For performance reasons MariaDB 10.0 has it disabled by default. You can enable it by starting mysqld with the option --performance-schema .\n\n- MariaDB 10.0 does not support the MySQL Memcached plugin. However, data stored using memcached can be retrieved because the data is stored as InnoDB tables. MariaDB is able to start successfully with an error message of not being able to find libmemcached.so library.\n\n- Users created with MySQL's SHA256 password algorithm cannot be used in MariaDB 10.0 as MariaDB does not include MySQL's sha256_password plugin.\n\n- MariaDB 10.0 does not support delayed replication - MDEV-7145 .\n\n- Also see a detailed breakdown of System variable differences between MariaDB 10.0 and MySQL 5.6 .\n\n- The low-level temporal format used by TIME, DATETIME and TIMESTAMP is different in MySQL 5.6 and MariaDB 10.0 . (In MariaDB 10.1 , the MySQL implementation is used by default - see mysql56_temporal_format .)\n\n- MariaDB implements some changes in the SQL query optimizer over what's available in MySQL.  This can result in EXPLAIN statements showing different plans.\n\n- MySQL delayed replication, (through MASTER_DELAY ), is not supported in MariaDB 10.0 , it was implemented in MariaDB 10.2.5\n\n- MariaDB does not support the optional init_vector argument for AES_ENCRYPT and AES_DECRYPT or the block_encryption_mode variable - MDEV-9069\n\n### Incompatibilities between MariaDB 5.5 and MySQL 5.5\n\n- Views with definition ALGORITHM=MERGE or ALGORITHM=TEMPTABLE got accidentally swapped between MariaDB and MySQL!  You have to re-create views created with either of these definitions!\n\n- INSERT IGNORE also gives warnings for duplicate key errors. You can turn this off by setting OLD_MODE=NO_DUP_KEY_WARNINGS_WITH_IGNORE (see OLD_MODE ).\n\n- Before MariaDB 5.5.31 , X'HHHH' , the standard SQL syntax for binary string literals, erroneously worked in the same way as 0xHHHH , which could work as a number or string depending on the context. In 5.5.31 this was fixed to behave as a string in all contexts (and never as a number), introducing an incompatibility with previous versions of MariaDB, and all versions of MySQL. See CAST and Hexadecimal Literals for more details and examples.\n\n- MariaDB dynamic columns are not supported by MySQL.\n\n- MariaDB virtual columns are not supported by MySQL.\n\n- MariaDB's HandlerSocket plugin is not supported by MySQL.\n\n- MariaDB's Cassandra Storage Engine is not supported by MySQL.\n\n- As of MariaDB 5.5.35 , EXTRACT (HOUR FROM ...) adheres to the SQL standard and returns a result from 0 to 23. In MySQL, and earlier versions of MariaDB, the result can be greater than 23.\n\n- See also a detailed breakdown of System variable differences between MariaDB 5.5 and MySQL 5.5 .\n\n### Incompatibilities between MariaDB 5.3 and MySQL 5.1\n\n- Views with definition ALGORITHM=MERGE or ALGORITHM=TEMPTABLE got accidentally swapped between MariaDB 5.2 and MariaDB 5.3 !  You have to re-create views created with either of these definitions!\n\n- A few error messages related to wrong conversions are different as MariaDB\n  provides more information in the message about what went wrong.\n\n- Error numbers for MariaDB-specific errors have been moved to start from 1900 so as not to conflict with MySQL errors.\n\n- Microseconds now work in all contexts; MySQL, in some contexts, lost the microsecond part from datetime and time.\n\n- UNIX_TIMESTAMP (constant-date-string) returns a timestamp with 6 decimals in MariaDB while MySQL returns it without a decimal. This can cause a problem if you are using UNIX_TIMESTAMP() as a partitioning function. You can fix this by using FLOOR (UNIX_TIMESTAMP(..)) or changing the date string to a date number, like 20080101000000.\n\n- MariaDB performs stricter checking of date, datetime and timestamp values. For example UNIX_TIMESTAMP ('x') now returns NULL instead of 0.\n\n- The old --maria- startup options are removed. You should use\n  the --aria- prefix instead. ( MariaDB 5.2 supports both --maria- and --aria- )\n\n- SHOW PROCESSLIST has an extra Progress column\n  which shows progress for some commands. You can disable it by\n  starting mysqld with either --old-mode=NO_PROGRESS_INFO or with the --old flag (see OLD_MODE ).\n\n- INFORMATION_SCHEMA.PROCESSLIST has three new columns for progress\n  reporting: STAGE , MAX_STAGE , and PROGRESS .\n\n- Long comments which start with /*M! or /*M!##### are executed.\n\n- If you use max_user_connections=0 (which means any number of connections) when starting mysqld, you can't change the global variable\n  anymore while mysqld remains running. This is because when mysqld is started\n  with max_user_connections=0 it does not allocate counting\n  structures (which also involve a mutex for each connection). This would lead\n  to wrong counters if you later changed the variable. If you want to be able\n  to change this variable at runtime, set it to a high value at startup.\n\n- You can set max_user_connections (both the global variable\n  and the GRANT option) to -1 to stop users from connecting to the\n  server. The global max_user_connections variable does not\n  affect users with the SUPER privilege.\n\n- The IGNORE directive does not ignore all errors (like fatal errors), only things that are safe to ignore.\n\n### Incompatibilities between MariaDB 5.2 and MySQL 5.1\n\nThe list is the same as between MariaDB 5.1 and MySQL 5.1, with one addition:\n\n- A new SQL_MODE value was added: IGNORE_BAD_TABLE_OPTIONS . If it is not set, using a table,\n  field, or index attribute (option) that is not supported by the chosen\n  storage engine will cause an error. This change might cause warnings in the\n  error log about incorrectly defined tables from the mysql database, fix that with mysql_upgrade .\n\nFor all practical purposes, MariaDB 5.2 is a drop in replacement for MariaDB 5.1 and MySQL 5.1.\n\n### Incompatibilities between MariaDB 5.1 and MySQL 5.1\n\nIn some few cases MariaDB has to be incompatible to allow MariaDB to provide\nmore and better information than MySQL.\n\nHere is the list of all known user level incompatibilities you may see\nwhen using MariaDB 5.1 instead of MySQL 5.1.\n\n- The installation package names start with MariaDB instead of MySQL.\n\n- Timings may be different as MariaDB is in many cases faster than MySQL.\n\n- mysqld in MariaDB also reads the [mariadb] sections of your\n  my.cnf files.\n\n- You can't use a binary only storage engine library with MariaDB if it's not\n  compiled for exactly the same MariaDB version. (This is because the server\n  internal structure THD is different between MySQL and MariaDB. This is common\n  also between different MySQL versions). This should not be a problem as most\n  people don't load new storage engines and MariaDB comes with more storage engines than MySQL.\n\n- CHECKSUM TABLE may give different result as MariaDB doesn't ignore NULL's\n  in the columns as MySQL 5.1 does (Future MySQL versions should calculate\n  checksums the same way as MariaDB). You can get the 'old style' checksum in\n  MariaDB by starting mysqld with the --old option. Note however that that\n  the MyISAM and Aria storage engines in MariaDB are using the new checksum\n  internally, so if you are using --old , the CHECKSUM command will be\n  slower as it needs to calculate the checksum row by row.\n\n- The slow query log has more information about the query,\n  which may be a problem if you have a script which parses the slow query log.\n\n- MariaDB by default takes a bit more memory than MySQL because we have by\n  default enabled the Aria storage engine for\n  handling internal temporary tables. If you need MariaDB to take very little\n  memory (at the expense of performance), you can set the value\n  of aria_pagecache_buffer_size to 1M (the default is 128M ).\n\n- If you are using new command options , new features of MariaDB or new storage engines , you can't move easily back\n  and forth between MySQL and MariaDB anymore.\n\n## Old, Unsupported Configuration Options\n\nIf you are using any of the following options in your /etc/my.cnf or other my.cnf file you should remove them.  This is also true for MySQL 5.1 or\nnewer:\n\n- skip-bdb\n\n## Replacing a MySQL RPM\n\nIf you uninstalled a MySQL RPM to install MariaDB, note that the MySQL RPM on\nuninstall renames /etc/my.cnf to /etc/my.cnf.rpmsave .\n\nAfter installing MariaDB you should do the following to restore your old\nconfiguration options:\n\n```\nmv -vi /etc/my.cnf.rpmsave /etc/my.cnf\n```\n\n## Incompatibilities between MariaDB and MySQL-Proxy\n\nA MySQL client API is able to connect to MariaDB using MySQL-Proxy but a MariaDB client API will receive progress reporting informations that MySQL-Proxy does not implement, to get full compatibility in all case just disable progress reporting on the client or server side.\n\nAnother option is to use the MariaDB MaxScale proxy , that works with both MySQL and MariaDB.\n\n## Related Links\n\n- MariaDB vs MySQL - Features\n\n- Moving from MySQL to MariaDB\n\n- Troubleshooting Installation Issues\n\n- Projects and applications that work with MariaDB"}
{"url": "https://mariadb.com/kb/en/mariadb-vs-mysql-features/", "title": "MySQL vs MariaDB: Performance", "content": "MariaDB Corporation has a MariaDB vs MySQL white paper available for download.\n\nSee also MariaDB vs MySQL - Compatibility\n\n### Differences Per Release\n\nFor differences between specific releases, see\n\n- Incompatibilities and Feature Differences Between MariaDB 11.4 and MySQL 8.0\n\n- Incompatibilities and Feature Differences Between MariaDB 11.3 and MySQL 8.0\n\n- Incompatibilities and Feature Differences Between MariaDB 11.2 and MySQL 8.0\n\n- Incompatibilities and Feature Differences Between MariaDB 10.11 and MySQL 8.0\n\n- Incompatibilities and Feature Differences Between MariaDB 10.6 and MySQL 8.0\n\n- Incompatibilities and Feature Differences Between MariaDB 10.5 and MySQL 8.0\n\n- For unmaintained versions, see Incompatibilities and Feature Differences Between MariaDB and MySQL - Unmaintained Series\n\nFor a detailed breakdown of system variable differences, see:\n\n- System Variable Differences Between MariaDB Rolling and MySQL 8.0\n\n- System variable differences between MariaDB 11.4 and MySQL 8.0\n\n- System variable differences between MariaDB 11.3 and MySQL 8.0\n\n- System variable differences between MariaDB 11.2 and MySQL 8.0\n\n- System variable differences between MariaDB 10.11 and MySQL 8.0\n\n- System variable differences between MariaDB 10.6 and MySQL 8.0\n\n- System variable differences between MariaDB 10.5 and MySQL 8.0\n\n- For unmaintained versions, see System Variable Differences Between MariaDB and MySQL - Unmaintained Series\n\nFor a detailed breakdown of function differences, see:\n\n- Function Differences Between MariaDB Rolling and MySQL 8.0\n\n- Function Differences Between MariaDB 11.4 and MySQL 8.0\n\n- Function Differences Between MariaDB 11.3 and MySQL 8.0\n\n- Function Differences Between MariaDB 11.2 and MySQL 8.0\n\n- Function Differences Between MariaDB 10.11 and MySQL 8.0\n\n- Function Differences Between MariaDB 10.6 and MySQL 8.0\n\n- Function Differences Between MariaDB 10.5 and MySQL 8.0\n\n- For unmaintained versions, see Function Differences Between MariaDB and MySQL - Unmaintained Series\n\n### More Storage Engines\n\nIn addition to the standard MyISAM , BLACKHOLE , CSV , MEMORY , ARCHIVE , and MERGE storage engines, the following are also included with MariaDB Source and Binary\npackages:\n\n- ColumnStore , a column oriented storage engine optimized for Data warehousing.\n\n- MyRocks , a storage engine with great compression, in 10.2\n\n- Aria , MyISAM replacement with better caching.\n\n- FederatedX (drop-in replacement for Federated)\n\n- OQGRAPH (In MariaDB 5.2 and later. Disabled in MariaDB 5.5 only.)\n\n- SphinxSE (In MariaDB 5.2 and later)\n\n- CONNECT in MariaDB 10.0 and later.\n\n- SEQUENCE in MariaDB 10.0 and later.\n\n- Spider in MariaDB 10.0 and later.\n\n- TokuDB (In MariaDB 5.5 and later, removed in 10.6)\n\n- Cassandra (In MariaDB 10.0 , removed in 10.6)\n\n### Speed Improvements\n\n- MariaDB now provides much faster privilege checks for setups with many user accounts or many database\n\n- The new FLUSH SSL command allows SSL certificates to be reloaded without restarting the server\n\n- Many optimizer enhancements in MariaDB 5.3 . Subqueries are now finally usable.\n  The complete list and a comparison with MySQL is here .\n  A benchmark can be found here .\n\n- Faster and safer replication: Group commit for the binary log . This makes many setups that use replication and lots of updates more than 2x times faster .\n\n- Parallel replication — new in 10.0\n\n- Improvements for InnoDB asynchronous IO subsystem on Windows.\n\n- Indexes for the MEMORY(HEAP) engine are faster. According to a simple test, 24% faster on INSERT for integer index and 60% faster for index on a CHAR(20) column. Fixed in MariaDB 5.5 and MySQL 5.7.\n\n- Segmented Key Cache for MyISAM. Can speed up MyISAM tables with up to 4x — new in 5.2\n\n- Adjustable hash size for MyISAM and Aria.  This can greatly improve shutdown time (from hours to minutes) if using a lot of MyISAM/Aria tables with delayed keys — new in 10.0.13\n\n- CHECKSUM TABLE is faster.\n\n- We improved the performance of character set conversions (and removed\n  conversions when they were not really needed).\n  Overall speed improvement is 1-5 % (according to sql-bench) but can be\n  higher for big result sets with all characters between 0x00-0x7f.\n\n- Pool of Threads in MariaDB 5.1 and even better in MariaDB 5.5 . This allows MariaDB to run with 200,000+ connections and with a notable speed improvement when using many connections.\n\n- Several speed improvements when a client connects to MariaDB.  Many of the improvements were done in MariaDB 10.1 and MariaDB 10.2 .\n\n- There are some improvements to the DBUG code to make its execution faster when debug is compiled in but not used.\n\n- Our use of the Aria storage engine enables faster complex queries (queries\n  which normally use disk-based temporary tables). The Aria storage\n  engine is used for internal temporary tables, which should give a speedup\n  when doing complex selects. Aria is usually faster for temporary tables when\n  compared to MyISAM because Aria caches row data in memory and normally\n  doesn't have to write the temporary rows to disk.\n\n- The test suite has been extended and now runs much faster than before, even though it\n  tests more things.\n\n### Extensions & New Features\n\nWe've added a lot of new features to MariaDB . If a\npatch or feature is useful, safe, and stable — we make\nevery effort to include it in MariaDB. The most notable features are:\n\n- Support introduced for System-versioned tables . Allows queries to access both current and historic data, aiding in managing retention, analysis and point-in-time recovery. — new in 10.3\n\n- ALTER TABLE... DROP COLUMN can now run as Instant operations.  Can also now change the ordering of columns. — new in 10.4\n\n- Support introduced for password expiration, using the user password expiry — new in 10.4\n\n- In order to support the use of multiple authentication plugins for a single user, the mysql.user system table has been retired in favor of the mysql.glob_priv system table. — new in 10.4\n\n- The unix_socket authentication plugin is now the default on Unix-like systems. This represents a major change to authentication in MariaDB — new in 10.4\n\n- Support introduced for Optimizer Trace , which provides detailed information on how the Optimizer processes queries.  To enable Optimizer Trace, set the optimizer_trace system variable — new in 10.4\n\n- The MariaDB SQL/PL stored procedure dialect (enabled with sql_mode=ORACLE ) now supports Oracle style packages. Support for the following statements are available: CREATE PACKAGE , CREATE PACKAGE BODY , DROP PACKAGE , DROP PACKAGE BODY , SHOW CREATE PACKAGE , SHOW CREATE PACKAGE BODY — new in 10.3\n\n- Automatic collection of Engine Independent Table Statistics — new in 10.4\n\n- Support for the use of parentheses (brackets) for specifying precedence in the ordering of execution for SELECT statements and Table Value Operations , (including the use of UNION , EXCEPT , INTERSECT operations) — new in 10.4\n\n- Support for anchored data types added to local stored procedure variables. — new in 10.3\n\n- Support added for Stored Aggregate functions — new in 10.3\n\n- Oracle compatible SUBSTR() function is available — new in 10.3\n\n- Oracle compatible SEQUENCE support is provided — new in 10.3\n\n- Support for anchored data types added to stored routine variables — new in 10.3\n\n- Support for anchored data types added to stored routine parameters — new in 10.3\n\n- Cursors with parameters are now supported — new in 10.3\n\n- INVISIBLE columns are now supported — new in 10.3\n\n- Instant ADD COLUMN is now available for InnoDB — new in 10.3\n\n- Window functions are supported — new in 10.2\n\n- Number of supported decimals in DECIMAL has increased from 30 to 38 — new in 10.2\n\n- Recursive Common Table Expressions — new in 10.2\n\n- New WITH statement. WITH is a common table expression that allows one to  refer to a subquery expression many times in a query — new in 10.2\n\n- CHECK CONSTRAINT — new in 10.2\n\n- DEFAULT expression , including DEFAULT for BLOB and TEXT — new in 10.2\n\n- Added catchall for list partitions — new in 10.2\n\n- Oracle-style EXECUTE IMMEDIATE statement — new in 10.2\n\n- Several new JSON functions — new in 10.2\n\n- Microsecond Precision in Processlist\n\n- Table Elimination\n\n- Virtual Columns — new in 5.2\n\n- Microseconds in MariaDB — new in 5.3\n\n- Extended User Statistics — new in 5.2\n\n- KILL all queries for a user — new in 5.3 ,\n\n- KILL QUERY ID - terminates the query by query_id, leaving the connection intact — new in 10.0.5 ,\n\n- Pluggable Authentication — new in 5.2\n\n- Storage-engine-specific CREATE TABLE — new in 5.2\n\n- Enhancements to INFORMATION SCHEMA.PLUGINS table — new in 5.2\n\n- Group commit for the binary log . This makes replication notably faster! — new in 5.3\n\n- Added -- rewrite-db mysqlbinlog option to change the used database — new in 5.2\n\n- Progress reporting for ALTER TABLE and LOAD DATA INFILE — new in 5.3\n\n- Faster joins and subqueries — new in 5.3\n\n- HandlerSocket and faster HANDLER calls — new in 5.3\n\n- Dynamic Columns support — new in 5.3\n\n- GIS Functionality — new in 5.3\n\n- Multi-source replication — new in 10.0\n\n- Global Transaction ID — new in 10.0\n\n- SHOW EXPLAIN gives the EXPLAIN plan for a query running in another thread. — new in 10.0\n\n- Roles — new in 10.0\n\n- PCRE Regular Expressions (including REGEXP_REPLACE() ) — new in 10.0\n\n- CREATE OR REPLACE\n\n- DELETE ... RETURNING — new in 10.0\n\n- MariaDB supports more collations than MySQL.\n\nFor a full list, please see features for each release\n\n### Better Testing\n\n- More tests in the test suite.\n\n- Bugs in tests fixed.\n\n- Test builds with different configure options to get better feature testing.\n\n- Remove invalid tests. (e.g. don't test feature ''X'' if that feature is not\n  in the tested build)\n\n### Fewer Warnings and Fewer Bugs\n\n- Bugs are bad. Fix as many bugs as possible and try to not introduce new ones.\n\n- Compiler warnings are also bad. Eliminate as many compiler warnings as\n  possible.\n\n### Truly Open Source\n\n- All code in MariaDB is released under GPL, LGPL or BSD.\n\n- MariaDB does not have closed source modules like the ones that can be found in MySQL Enterprise Edition. In fact, all the closed source features in MySQL 5.5 Enterprise Edition are found in the MariaDB open source version.\n\n- MariaDB client libraries (for C, for Java (JDBC), for Windows (ODBC)) are released under LGPL to allow linking with closed source software.  MySQL client libraries are released under GPL that does not allow linking with closed source software.\n\n- MariaDB includes test cases for all fixed bugs. Oracle doesn't provide test cases for new bugs fixed in MySQL 5.5.\n\n- All bugs and development plans are public.\n\n- MariaDB is developed by the community in true open source spirit.\n\n### Related Links\n\n- Compatiblity between MariaDB and MySQL\n\n- Moving from MySQL\n\n- Troubleshooting Installation Issues"}
{"url": "https://mariadb.com/kb/en/incompatibilities-and-feature-differences-between-mariadb-rolling-and-mysql/", "title": "Incompatibilities and Feature Differences Between MariaDB Rolling and MySQL 8.0", "content": "### Contents\n\n- Storage Engines\n\n- Extensions and New Features\n\n- Incompatibilities and Differences in Implementation\n\nMariaDB maintains high levels of compatibility with MySQL, and most applications that use MySQL will work seamlessly with MariaDB. However, take note of the following incompatibilities and feature differences between MariaDB Rolling Release and MySQL 8.0. It is based on the versions MySQL 8.0.36 and MariaDB 11.7.0 . Note that MySQL 8 is an 'evergreen' release, so features may be added or removed in later releases.\n\n## Storage Engines\n\nIn addition to the standard InnoDB , MyISAM , BLACKHOLE , CSV , MEMORY , ARCHIVE , and MERGE storage engines, the following are also available with MariaDB Rolling:\n\n- ColumnStore utilizes a massively parallel distributed data architecture and is designed for big data scaling to process petabytes of data.\n\n- MyRocks , a storage engine with great compression\n\n- S3 storage engine allows one to archive MariaDB tables in Amazon S3, or any third-party public or private cloud that implements S3 API.\n\n- Aria , MyISAM replacement with better caching.\n\n- CONNECT\n\n- SEQUENCE\n\n- Spider\n\n- SphinxSE\n\n- FederatedX (drop-in replacement for Federated)\n\n- OQGRAPH\n\n## Extensions and New Features\n\nThe most notable features available in MariaDB , but not in MySQL, are:\n\n- MariaDB Vectors allow MariaDB to perform as a relational vector database.\n\n- Galera is a standard part of MariaDB Server.\n\n- Temporal data tables in the form of: System-versioned tables (allow you to query and operate on historic data). Application-time periods (allow you to query and operate on a temporal range of data), including the WITHOUT OVERLAPS clause. Bitemporal tables (which combine both system-versioning and application-time periods).\n\n- System-versioned tables (allow you to query and operate on historic data).\n\n- Application-time periods (allow you to query and operate on a temporal range of data), including the WITHOUT OVERLAPS clause.\n\n- Bitemporal tables (which combine both system-versioning and application-time periods).\n\n- DML-only flashback , allowing instances, databases or tables to be rolled back to an old snapshot.\n\n- Oracle compatibility mode\n\n- MariaDB supports localization in a number of additional languages: Bulgarian, Chinese, Georgian, Hindi, Serbian, and Ukrainian.\n\n- MariaDB has made major improvements to the optimizer .\n\n- Sequences\n\n- Table Value Constructors\n\n- Dynamic Columns support\n\n- Semi-sync plugin merged into the server\n\n- OR REPLACE syntax for CREATE statements, such as CREATE OR REPLACE TABLE , CREATE OR REPLACE DATABASE , etc\n\n- DELETE ... RETURNING , INSERT ... RETURNING , REPLACE ... RETURNING\n\n- GRANT to PUBLIC - MDEV-5215 ( blog post )\n\n- PARSEC authentication plugin\n\n- WAIT syntax for setting the lock wait timeout.\n\n- UUID data type for storing UUIDs.\n\n- INET6 and INET4 data types for storing IPv6 and IPv4 addresses.\n\n- SUPER privileges made more granular.\n\n- PROXY protocol support\n\n- Multiple compression algorithms available as plugins\n\n- Number of supported decimals in DECIMAL has increased from 30 to 38\n\n- Number of parts of an index increased from 16 to 32 .\n\n- Added catchall for list partitions\n\n- Oracle-style EXECUTE IMMEDIATE statement\n\n- Lots of new JSON functions\n\n- Microsecond Precision in Processlist\n\n- Table Elimination\n\n- Virtual Columns\n\n- Extended User Statistics\n\n- KILL all queries for a user\n\n- Storage-engine-specific CREATE TABLE\n\n- MariaDB supports more collations (506) than MySQL (266).\n\n- FLUSH SSL command to reload SSL certificates without server restart.\n\n- IF NOT EXISTS clause added to INSTALL PLUGIN and IF EXISTS clause added to UNINSTALL PLUGIN and UNINSTALL SONAME\n\n- Enhancements to INFORMATION SCHEMA.PLUGINS table\n\n- Group commit for the binary log . This makes replication notably faster!\n\n- BACKUP STAGE allows one to implement very efficient backups with minimal locking.\n\n- Progress reporting for ALTER TABLE and LOAD DATA INFILE\n\n- SHOW EXPLAIN gives the EXPLAIN plan for a query running in another thread. MySQL introduced the EXPLAIN FOR CONNECTION syntax to do the same thing.\n\n- PCRE Regular Expressions (including REGEXP_REPLACE() )\n\n- HandlerSocket and faster HANDLER calls\n\n- MySQL 8 does not support PROCEDURE ANALYSE\n\n- MySQL 8 does not support the use of \\N as an alias for NULL\n\n- In MariaDB, it is possible to limit the total size of all temporary files and tables on disk , not just per file.\n\n- On 64-bit platforms, the MariaDB TIMESTAMP was extended to allow values to '2106-02-07 06:28:15 UTC', rather than just  '2038-01-19 03:14:07 UTC'.\n\n- MariaDB supports REPAIR TABLE ... FORCE\n\n- Single-table DELETEs support table aliases in MariaDB\n\n## Incompatibilities and Differences in Implementation\n\nWhen moving from MySQL 8.0 to MariaDB Rolling, please take note of the following incompatibilities:\n\n- For a list of function differences, see Function Differences Between MariaDB Rolling and MySQL 8.0\n\n- For a list of system variable differences, see System Variable Differences Between MariaDB Rolling and MySQL 8.0\n\n- MariaDB does not support MySQL's SET PERSIST - MDEV-16228\n\n- MariaDB's GTID is not compatible with MySQL's. Note that MariaDB and MySQL also have different GTID system variables , so these need to be adjusted when migrating.\n\n- The unix_socket authentication plugin is now default on Unix-like systems, which is a major change to authentication in MariaDB. See Authentication from MariaDB 10.4 for an overview of the changes.\n\n- All mysql* binaries are now named mariadb* (the previous mysql named is retained as a symlink for compatibility purposes)\n\n- Not all character sets and collations are supported across both MySQL and MariaDB. As of 11.7, MariaDB supports 40 character sets and 506 collations . As of 8.0.35, MySQL supports 41 character sets ( gb18030 being the additional one - MDEV-7495 ) and 286 collations.\n\n- MariaDB indicates collation pad status as part of the name (e.g. utf8mb3_unicode_nopad_ci ), while MySQL indicates pad status by means of an extra column in SHOW COLLATION .\n\n- To make CREATE TABLE ... SELECT work the same way in statement based and row based replication it's by default executed as CREATE OR REPLACE TABLE on the replica.  One benefit of this is that if the replica dies in the middle of CREATE ... SELECT it will be able to continue. One can use the slave-ddl-exec-mode variable to specify how CREATE TABLE and DROP TABLE is replicated.\n\n- One can use the slave-ddl-exec-mode variable to specify how CREATE TABLE and DROP TABLE is replicated.\n\n- Users created with MySQL's SHA256 password algorithm cannot be used in MariaDB Rolling - MDEV-9804 .\n\n- MariaDB Rollingdoes not support Lateral Derived Tables - MDEV-19078 .\n\n- MariaDB Rolling does not support CIDR notation for user accounts - MDEV-25515 .\n\n- MariaDB stores JSON as true text, not in binary format as MySQL. MariaDB's JSON functions are much faster than MySQL's so there is no need to store in binary format, which would add complexity when manipulating JSON objects.\n\n- For the same reason, MariaDB's JSON data type is an alias for LONGTEXT . If you want to replicate JSON columns from MySQL to MariaDB, you should store JSON objects in MySQL in a TEXT or LONGTEXT column or use statement-based replication. If you are using JSON columns and want to upgrade to MariaDB, use the mysql_json plugin to automatically convert MySQL JSON to TEXT, or alternatively you need to either convert them to TEXT or use mysqldump to copy these tables to MariaDB.\n\n- In MySQL, JSON is compared according to json values. In MariaDB JSON strings are normal strings and compared as strings.\n\n- MariaDB Rolling does not support MySQL's JSON operators ( -> and ->> ) - MDEV-13594\n\n- MariaDB Rolling supports the standard by producing null and a warning for JSON_SEARCH when given invalid data, while MySQL produces an error.\n\n- Roles MariaDB never allows authentication via roles, while MySQL permits this. MySQL permits activating multiple roles at the same time. MariaDB can achieve the same result by creating an intermediate aggregate role. In the INFORMATION_SCHEMA.ENABLED_ROLES table , MySQL reports just the direct list of enabled roles, while MariaDB reports the enabled role, plus the effective inherited roles. MySQL extends the INFORMATION_SCHEMA.APPLICABLE_ROLES table . MySQL includes the tables INFORMATION_SCHEMA.ROLE_TABLE_GRANTS, INFORMATION_SCHEMA.ROLE_ROUTINE_GRANTS, INFORMATION_SCHEMA.ROLE_COLUMN_GRANTS, and INFORMATION_SCHEMA ADMINISTRABLE_ROLE_AUTHORIZATIONS.\n\n- MariaDB never allows authentication via roles, while MySQL permits this.\n\n- MySQL permits activating multiple roles at the same time. MariaDB can achieve the same result by creating an intermediate aggregate role.\n\n- In the INFORMATION_SCHEMA.ENABLED_ROLES table , MySQL reports just the direct list of enabled roles, while MariaDB reports the enabled role, plus the effective inherited roles.\n\n- MySQL extends the INFORMATION_SCHEMA.APPLICABLE_ROLES table .\n\n- MySQL includes the tables INFORMATION_SCHEMA.ROLE_TABLE_GRANTS, INFORMATION_SCHEMA.ROLE_ROUTINE_GRANTS, INFORMATION_SCHEMA.ROLE_COLUMN_GRANTS, and INFORMATION_SCHEMA ADMINISTRABLE_ROLE_AUTHORIZATIONS.\n\n- MySQL has the performance schema enabled by default. For performance reasons MariaDBRolling has it disabled by default. You can enable it by starting mariadbd with the option --performance-schema .\n\n- MariaDB has removed the InnoDB Change Buffer .\n\n- In MariaDB Rolling, using FLUSH TABLES without any table list will only close tables not in use, and tables not locked by the FLUSH TABLES connection. If there are no locked tables, FLUSH TABLES will be instant and will not cause any waits, as it no longer waits for tables in use. When a table list is provided, the server will wait for the end of any transactions that are using the tables. In MySQL, FLUSH TABLES only waits for the statements to complete.\n\n- MariaDB binaries ( mariadbd , myisamchk etc.) give a warning if one uses a unique prefix of an option (such as --big-table instead of --big-tables ). MySQL binaries require the full option name.\n\n- MariaDB Rolling implements InnoDB encryption in a different way to MySQL 8.0.\n\n- MySQL's implementation of aborting statements that exceed a certain time to execute can only kill SELECTs, while MariaDB's can kill any queries (excluding stored procedures).\n\n- MariaDB Rolling does not support MySQL's SELECT /*+ MAX_EXECUTION_TIME(n) */ ... - see Aborting Statements that Exceed a Certain Time to Execute .\n\n- MySQL 8.0 does not support the Query Cache .\n\n- MariaDB Rolling does not support the MySQL Memcached plugin (which has been deprecated in MySQL 8.0). However, data stored using memcached can be retrieved because the data is stored as InnoDB tables. MariaDB is able to start successfully with an error message of not being able to find libmemcached.so library.\n\n- In MySQL, X'HHHH' , the standard SQL syntax for binary string literals, erroneously works in the same way as 0xHHHH , which could work as a number or string depending on the context. In MariaDB, this has been fixed to behave as a string in all contexts (and never as a number). See CAST and Hexadecimal Literals for more details and examples.\n\n- In MariaDB Rolling, SHOW CREATE TABLE does not quote the DEFAULT value of an integer. MariaDB 10.2 and earlier, and MySQL, do. Since MariaDB can support defaults for BLOB and TEXT fields, while MySQL does not, SHOW CREATE TABLE will also append DEFAULT NULL where no default is explicitly provided to nullable BLOB or TEXT fields in MariaDB.\n\n- As a result of implementing Table Value Constructors , the VALUES function has been renamed to VALUE().\n\n- MariaDB's NOWAIT supports SELECT statements, LOCK TABLES and various DDL statements, while MySQL's NOWAIT only supports SELECT.\n\n- MariaDB's NOWAIT cannot be added on views and stored procedures while MySQL's can - MDEV-25247\n\n- MariaDB does not support RENAME table while it is write-locked - MDEV-30814\n\n- MariaDB returns an ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction when unable to lock within the time, while MySQL returns ERROR 3572 (HY000): Statement aborted because lock(s) could not be acquired immediately and NOWAIT is set\n\n- MariaDB does not support the optional init_vector argument for AES_ENCRYPT and AES_DECRYPT or the block_encryption_mode variable - MDEV-9069\n\n- MariaDB does not support the --initialize option. Use mariadb-install-db instead. - MDEV-19010\n\n- MariaDB Rolling does not support the ngram and MeCab full-text parser plugins - MDEV-10267 , MDEV-10268 .\n\n- MariaDB Rolling does not support the MySQL X plugin .\n\n- MariaDB Rolling does not support CREATE TABLESPACE for InnoDB.\n\n- The MySQL 8.0 and MariaDB Rolling INFORMATION_SCHEMA.COLUMNS table contain slightly different fields.\n\n- MariaDB Rolling client executables allow the connection protocol to be forced by specifying only connection properties on the command-line. See mariadb Command-line client\n\n- The MySQL binary log includes the thread_id, while MariaDB's binary log does not - MDEV-7850\n\n- The MariaDB syntax supporting Spatial Reference System IDs for spatial data type columns with REF_SYSTEM_ID is not supported by MySQL. MySQL 8 introduced CREATE SPATIAL REFERENCE SYSTEM , which is not supported by MariaDB - MDEV-29953\n\n- MariaDB Rolling does not support the RESTART statement - MDEV-30813\n\n- Compressing the binary log in MariaDB uses a different compression algorithm, and different system variables to manage.\n\n- MariaDB Rolling does not support the SELECT FOR UPDATE and FOR SHARE locks - MDEV-17514\n\nFor protocol differences, see MariaDB protocol difference with MySQL ."}
{"url": "https://mariadb.com/kb/en/incompatibilities-and-feature-differences-between-mariadb-11-4-and-mysql-8-/", "title": "Incompatibilities and Feature Differences Between MariaDB 11.4 and MySQL 8.0", "content": "### Contents\n\n- Storage Engines\n\n- Extensions and New Features\n\n- Incompatibilities and Differences in Implementation\n\nMariaDB maintains high levels of compatibility with MySQL, and most applications that use MySQL will work seamlessly with MariaDB. However, take note of the following incompatibilities and feature differences between MariaDB 11.4 and MySQL 8.0. It is based on the versions MySQL 8.0.36 and MariaDB 11.4.1 . Note that MySQL 8 is an 'evergreen' release, so features may be added or removed in later releases.\n\n## Storage Engines\n\nIn addition to the standard InnoDB , MyISAM , BLACKHOLE , CSV , MEMORY , ARCHIVE , and MERGE storage engines, the following are also available with MariaDB 11.4 :\n\n- ColumnStore utilizes a massively parallel distributed data architecture and is designed for big data scaling to process petabytes of data.\n\n- MyRocks , a storage engine with great compression\n\n- S3 storage engine allows one to archive MariaDB tables in Amazon S3, or any third-party public or private cloud that implements S3 API.\n\n- Aria , MyISAM replacement with better caching.\n\n- CONNECT\n\n- SEQUENCE\n\n- Spider\n\n- SphinxSE\n\n- FederatedX (drop-in replacement for Federated)\n\n- OQGRAPH\n\n## Extensions and New Features\n\nThe most notable features available in MariaDB , but not in MySQL, are:\n\n- Galera is a standard part of MariaDB Server.\n\n- Temporal data tables in the form of: System-versioned tables (allow you to query and operate on historic data). Application-time periods (allow you to query and operate on a temporal range of data), including the WITHOUT OVERLAPS clause. Bitemporal tables (which combine both system-versioning and application-time periods).\n\n- System-versioned tables (allow you to query and operate on historic data).\n\n- Application-time periods (allow you to query and operate on a temporal range of data), including the WITHOUT OVERLAPS clause.\n\n- Bitemporal tables (which combine both system-versioning and application-time periods).\n\n- DML-only flashback , allowing instances, databases or tables to be rolled back to an old snapshot.\n\n- Oracle compatibility mode\n\n- MariaDB supports localization in a number of additional languages: Bulgarian, Chinese, Georgian, Hindi, Serbian, and Ukrainian.\n\n- MariaDB has made major improvements to the optimizer .\n\n- Sequences\n\n- Table Value Constructors\n\n- Dynamic Columns support\n\n- Semi-sync plugin merged into the server\n\n- OR REPLACE syntax for CREATE statements, such as CREATE OR REPLACE TABLE , CREATE OR REPLACE DATABASE , etc\n\n- DELETE ... RETURNING , INSERT ... RETURNING , REPLACE ... RETURNING\n\n- GRANT to PUBLIC - MDEV-5215 ( blog post )\n\n- WAIT syntax for setting the lock wait timeout.\n\n- UUID data type for storing UUIDs.\n\n- INET6 and INET4 data types for storing IPv6 and IPv4 addresses.\n\n- SUPER privileges made more granular.\n\n- PROXY protocol support\n\n- Multiple compression algorithms available as plugins\n\n- Number of supported decimals in DECIMAL has increased from 30 to 38\n\n- Number of parts of an index increased from 16 to 32 .\n\n- Added catchall for list partitions\n\n- Oracle-style EXECUTE IMMEDIATE statement\n\n- Lots of new JSON functions\n\n- Microsecond Precision in Processlist\n\n- Table Elimination\n\n- Virtual Columns\n\n- Extended User Statistics\n\n- KILL all queries for a user\n\n- Storage-engine-specific CREATE TABLE\n\n- MariaDB supports more collations (506) than MySQL (266).\n\n- FLUSH SSL command to reload SSL certificates without server restart.\n\n- IF NOT EXISTS clause added to INSTALL PLUGIN and IF EXISTS clause added to UNINSTALL PLUGIN and UNINSTALL SONAME\n\n- Enhancements to INFORMATION SCHEMA.PLUGINS table\n\n- Group commit for the binary log . This makes replication notably faster!\n\n- BACKUP STAGE allows one to implement very efficient backups with minimal locking.\n\n- Progress reporting for ALTER TABLE and LOAD DATA INFILE\n\n- SHOW EXPLAIN gives the EXPLAIN plan for a query running in another thread. MySQL introduced the EXPLAIN FOR CONNECTION syntax to do the same thing.\n\n- PCRE Regular Expressions (including REGEXP_REPLACE() )\n\n- HandlerSocket and faster HANDLER calls\n\n- MySQL 8 does not support PROCEDURE ANALYSE\n\n- MySQL 8 does not support the use of \\N as an alias for NULL\n\n## Incompatibilities and Differences in Implementation\n\nWhen moving from MySQL 8.0 to MariaDB 11.4 , please take note of the following incompatibilities:\n\n- For a list of function differences, see Function Differences Between MariaDB 11.4 and MySQL 8.0\n\n- For a list of system variable differences, see System Variable Differences Between MariaDB 114 and MySQL 8.0\n\n- MariaDB does not support MySQL's SET PERSIST - MDEV-16228\n\n- MariaDB's GTID is not compatible with MySQL's. Note that MariaDB and MySQL also have different GTID system variables , so these need to be adjusted when migrating.\n\n- The unix_socket authentication plugin is now default on Unix-like systems, which is a major change to authentication in MariaDB. See Authentication from MariaDB 10.4 for an overview of the changes.\n\n- All mysql* binaries are now named mariadb* (the previous mysql named is retained as a symlink for compatibility purposes)\n\n- Not all character sets and collations are supported across both MySQL and MariaDB. As of 11.4, MariaDB supports 40 character sets and 506 collations . As of 8.0.35, MySQL supports 41 character sets ( gb18030 being the additional one - MDEV-7495 ) and 286 collations.\n\n- MariaDB indicates collation pad status as part of the name (e.g. utf8mb3_unicode_nopad_ci ), while MySQL indicates pad status by means of an extra column in SHOW COLLATION .\n\n- To make CREATE TABLE ... SELECT work the same way in statement based and row based replication it's by default executed as CREATE OR REPLACE TABLE on the replica.  One benefit of this is that if the replica dies in the middle of CREATE ... SELECT it will be able to continue. One can use the slave-ddl-exec-mode variable to specify how CREATE TABLE and DROP TABLE is replicated.\n\n- One can use the slave-ddl-exec-mode variable to specify how CREATE TABLE and DROP TABLE is replicated.\n\n- Users created with MySQL's SHA256 password algorithm cannot be used in MariaDB 11.4 - MDEV-9804 .\n\n- MariaDB 114 does not support Lateral Derived Tables - MDEV-19078 .\n\n- MariaDB 11.4 does not support CIDR notation for user accounts - MDEV-25515 .\n\n- MariaDB stores JSON as true text, not in binary format as MySQL. MariaDB's JSON functions are much faster than MySQL's so there is no need to store in binary format, which would add complexity when manipulating JSON objects.\n\n- For the same reason, MariaDB's JSON data type is an alias for LONGTEXT . If you want to replicate JSON columns from MySQL to MariaDB, you should store JSON objects in MySQL in a TEXT or LONGTEXT column or use statement-based replication. If you are using JSON columns and want to upgrade to MariaDB, use the mysql_json plugin to automatically convert MySQL JSON to TEXT, or alternatively you need to either convert them to TEXT or use mysqldump to copy these tables to MariaDB.\n\n- In MySQL, JSON is compared according to json values. In MariaDB JSON strings are normal strings and compared as strings.\n\n- MariaDB 11.4 does not support MySQL's JSON operators ( -> and ->> ) - MDEV-13594\n\n- MariaDB 11.4 supports the standard by producing null and a warning for JSON_SEARCH when given invalid data, while MySQL produces an error.\n\n- Roles MariaDB never allows authentication via roles, while MySQL permits this. MySQL permits activating multiple roles at the same time. MariaDB can achieve the same result by creating an intermediate aggregate role. In the INFORMATION_SCHEMA.ENABLED_ROLES table , MySQL reports just the direct list of enabled roles, while MariaDB reports the enabled role, plus the effective inherited roles. MySQL extends the INFORMATION_SCHEMA.APPLICABLE_ROLES table . MySQL includes the tables INFORMATION_SCHEMA.ROLE_TABLE_GRANTS, INFORMATION_SCHEMA.ROLE_ROUTINE_GRANTS, INFORMATION_SCHEMA.ROLE_COLUMN_GRANTS, and INFORMATION_SCHEMA ADMINISTRABLE_ROLE_AUTHORIZATIONS.\n\n- MariaDB never allows authentication via roles, while MySQL permits this.\n\n- MySQL permits activating multiple roles at the same time. MariaDB can achieve the same result by creating an intermediate aggregate role.\n\n- In the INFORMATION_SCHEMA.ENABLED_ROLES table , MySQL reports just the direct list of enabled roles, while MariaDB reports the enabled role, plus the effective inherited roles.\n\n- MySQL extends the INFORMATION_SCHEMA.APPLICABLE_ROLES table .\n\n- MySQL includes the tables INFORMATION_SCHEMA.ROLE_TABLE_GRANTS, INFORMATION_SCHEMA.ROLE_ROUTINE_GRANTS, INFORMATION_SCHEMA.ROLE_COLUMN_GRANTS, and INFORMATION_SCHEMA ADMINISTRABLE_ROLE_AUTHORIZATIONS.\n\n- MySQL has the performance schema enabled by default. For performance reasons MariaDB 11.4 has it disabled by default. You can enable it by starting mariadbd with the option --performance-schema .\n\n- MariaDB has removed the InnoDB Change Buffer .\n\n- In MariaDB 11.4 , using FLUSH TABLES without any table list will only close tables not in use, and tables not locked by the FLUSH TABLES connection. If there are no locked tables, FLUSH TABLES will be instant and will not cause any waits, as it no longer waits for tables in use. When a table list is provided, the server will wait for the end of any transactions that are using the tables. In MySQL, FLUSH TABLES only waits for the statements to complete.\n\n- MariaDB binaries ( mariadbd , myisamchk etc.) give a warning if one uses a unique prefix of an option (such as --big-table instead of --big-tables ). MySQL binaries require the full option name.\n\n- MariaDB 11.4 implements InnoDB encryption in a different way to MySQL 8.0.\n\n- MySQL's implementation of aborting statements that exceed a certain time to execute can only kill SELECTs, while MariaDB's can kill any queries (excluding stored procedures).\n\n- MariaDB 11.4 does not support MySQL's SELECT /*+ MAX_EXECUTION_TIME(n) */ ... - see Aborting Statements that Exceed a Certain Time to Execute .\n\n- MySQL 8.0 does not support the Query Cache .\n\n- MariaDB 11.4 does not support the MySQL Memcached plugin (which has been deprecated in MySQL 8.0). However, data stored using memcached can be retrieved because the data is stored as InnoDB tables. MariaDB is able to start successfully with an error message of not being able to find libmemcached.so library.\n\n- In MySQL, X'HHHH' , the standard SQL syntax for binary string literals, erroneously works in the same way as 0xHHHH , which could work as a number or string depending on the context. In MariaDB, this has been fixed to behave as a string in all contexts (and never as a number). See CAST and Hexadecimal Literals for more details and examples.\n\n- In MariaDB 11.4 , SHOW CREATE TABLE does not quote the DEFAULT value of an integer. MariaDB 10.2 and earlier, and MySQL, do. Since MariaDB can support defaults for BLOB and TEXT fields, while MySQL does not, SHOW CREATE TABLE will also append DEFAULT NULL where no default is explicitly provided to nullable BLOB or TEXT fields in MariaDB.\n\n- As a result of implementing Table Value Constructors , the VALUES function has been renamed to VALUE().\n\n- MariaDB's NOWAIT supports SELECT statements, LOCK TABLES and various DDL statements, while MySQL's NOWAIT only supports SELECT.\n\n- MariaDB's NOWAIT cannot be added on views and stored procedures while MySQL's can - MDEV-25247\n\n- MariaDB does not support RENAME table while it is write-locked - MDEV-30814\n\n- MariaDB returns an ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction when unable to lock within the time, while MySQL returns ERROR 3572 (HY000): Statement aborted because lock(s) could not be acquired immediately and NOWAIT is set\n\n- MariaDB does not support the optional init_vector argument for AES_ENCRYPT and AES_DECRYPT or the block_encryption_mode variable - MDEV-9069\n\n- MariaDB does not support the --initialize option. Use mariadb-install-db instead. - MDEV-19010\n\n- MariaDB 11.4 does not support the ngram and MeCab full-text parser plugins - MDEV-10267 , MDEV-10268 .\n\n- MariaDB 11.4 does not support the MySQL X plugin .\n\n- MariaDB 11.4 does not support CREATE TABLESPACE for InnoDB.\n\n- The MySQL 8.0 and MariaDB 11.4 INFORMATION_SCHEMA.COLUMNS table contain slightly different fields.\n\n- MariaDB 11.4 client executables allow the connection protocol to be forced by specifying only connection properties on the command-line. See mariadb Command-line client\n\n- The MySQL binary log includes the thread_id, while MariaDB's binary log does not - MDEV-7850\n\n- The MariaDB syntax supporting Spatial Reference System IDs for spatial data type columns with REF_SYSTEM_ID is not supported by MySQL. MySQL 8 introduced CREATE SPATIAL REFERENCE SYSTEM , which is not supported by MariaDB - MDEV-29953\n\n- MariaDB 11.4 does not support the RESTART statement - MDEV-30813\n\n- Compressing the binary log in MariaDB uses a different compression algorithm, and different system variables to manage.\n\n- MariaDB 11.4 does not support the SELECT FOR UPDATE and FOR SHARE locks - MDEV-17514\n\nFor protocol differences, see MariaDB protocol difference with MySQL ."}
{"url": "https://mariadb.com/kb/en/incompatibilities-and-feature-differences-between-mariadb-11-2-and-mysql-8-/", "title": "Incompatibilities and Feature Differences Between MariaDB 11.2 and MySQL 8.0", "content": "### Contents\n\n- Storage Engines\n\n- Extensions and New Features\n\n- Incompatibilities\n\nMariaDB maintains high levels of compatibility with MySQL, and most applications that use MySQL will work seamlessly with MariaDB. However, take note of the following incompatibilities and feature differences between MariaDB 11.2 and MySQL 8.0. It is based on the versions MySQL 8.0.35 and MariaDB 11.2.2 . Note that MySQL 8 is an 'evergreen' release, so features may be added or removed in later releases.\n\n## Storage Engines\n\nIn addition to the standard InnoDB , MyISAM , BLACKHOLE , CSV , MEMORY , ARCHIVE , and MERGE storage engines, the following are also available with MariaDB 11.2 :\n\n- ColumnStore utilizes a massively parallel distributed data architecture and is designed for big data scaling to process petabytes of data.\n\n- MyRocks , a storage engine with great compression\n\n- S3 storage engine allows one to archive MariaDB tables in Amazon S3, or any third-party public or private cloud that implements S3 API.\n\n- Aria , MyISAM replacement with better caching.\n\n- CONNECT\n\n- SEQUENCE\n\n- Spider\n\n- SphinxSE\n\n- FederatedX (drop-in replacement for Federated)\n\n- OQGRAPH\n\n## Extensions and New Features\n\nThe most notable features available in MariaDB , but not in MySQL, are:\n\n- Galera is a standard part of MariaDB Server.\n\n- Temporal data tables in the form of: System-versioned tables (allow you to query and operate on historic data). Application-time periods (allow you to query and operate on a temporal range of data), including the WITHOUT OVERLAPS clause. Bitemporal tables (which combine both system-versioning and application-time periods).\n\n- System-versioned tables (allow you to query and operate on historic data).\n\n- Application-time periods (allow you to query and operate on a temporal range of data), including the WITHOUT OVERLAPS clause.\n\n- Bitemporal tables (which combine both system-versioning and application-time periods).\n\n- DML-only flashback , allowing instances, databases or tables to be rolled back to an old snapshot.\n\n- Oracle compatibility mode\n\n- MariaDB supports localization in a number of additional languages: Bulgarian, Chinese, Georgian, Hindi, Serbian, and Ukrainian.\n\n- MariaDB has made major improvements to the optimizer .\n\n- Sequences\n\n- Table Value Constructors\n\n- Dynamic Columns support\n\n- Semi-sync plugin merged into the server\n\n- OR REPLACE syntax for CREATE statements, such as CREATE OR REPLACE TABLE , CREATE OR REPLACE DATABASE , etc\n\n- DELETE ... RETURNING , INSERT ... RETURNING , REPLACE ... RETURNING\n\n- GRANT to PUBLIC - MDEV-5215 ( blog post )\n\n- WAIT syntax for setting the lock wait timeout.\n\n- UUID data type for storing UUIDs.\n\n- INET6 and INET4 data types for storing IPv6 and IPv4 addresses.\n\n- SUPER privileges made more granular.\n\n- PROXY protocol support\n\n- Multiple compression algorithms available as plugins\n\n- Number of supported decimals in DECIMAL has increased from 30 to 38\n\n- Number of parts of an index increased from 16 to 32 .\n\n- Added catchall for list partitions\n\n- Oracle-style EXECUTE IMMEDIATE statement\n\n- Lots of new JSON functions\n\n- Microsecond Precision in Processlist\n\n- Table Elimination\n\n- Virtual Columns\n\n- Extended User Statistics\n\n- KILL all queries for a user\n\n- Storage-engine-specific CREATE TABLE\n\n- MariaDB supports more collations (506) than MySQL (266).\n\n- FLUSH SSL command to reload SSL certificates without server restart.\n\n- IF NOT EXISTS clause added to INSTALL PLUGIN and IF EXISTS clause added to UNINSTALL PLUGIN and UNINSTALL SONAME\n\n- Enhancements to INFORMATION SCHEMA.PLUGINS table\n\n- Group commit for the binary log . This makes replication notably faster!\n\n- BACKUP STAGE allows one to implement very efficient backups with minimal locking.\n\n- Progress reporting for ALTER TABLE and LOAD DATA INFILE\n\n- SHOW EXPLAIN gives the EXPLAIN plan for a query running in another thread. MySQL introduced the EXPLAIN FOR CONNECTION syntax to do the same thing.\n\n- PCRE Regular Expressions (including REGEXP_REPLACE() )\n\n- HandlerSocket and faster HANDLER calls\n\n- MySQL 8 does not support PROCEDURE ANALYSE\n\n- MySQL 8 does not support the use of \\N as an alias for NULL\n\n## Incompatibilities\n\nWhen moving from MySQL 8.0 to MariaDB 11.2 , please take note of the following incompatibilities:\n\n- For a list of function differences, see Function Differences Between MariaDB 11.2 and MySQL 8.0\n\n- For a list of system variable differences, see System Variable Differences Between MariaDB 11.2 and MySQL 8.0\n\n- MariaDB does not support MySQL's SET PERSIST - MDEV-16228\n\n- MariaDB's GTID is not compatible with MySQL's. Note that MariaDB and MySQL also have different GTID system variables , so these need to be adjusted when migrating.\n\n- The unix_socket authentication plugin is now default on Unix-like systems, which is a major change to authentication in MariaDB. See Authentication from MariaDB 10.4 for an overview of the changes.\n\n- All mysql* binaries are now named mariadb* (the previous mysql named is retained as a symlink for compatibility purposes)\n\n- Not all character sets and collations are supported across both MySQL and MariaDB. As of 11.2, MariaDB supports 40 character sets and 506 collations . As of 8.0.35, MySQL supports 41 character sets ( gb18030 being the additional one - MDEV-7495 ) and 286 collations.\n\n- MariaDB indicates collation pad status as part of the name (e.g. utf8mb3_unicode_nopad_ci ), while MySQL indicates pad status by means of an extra column in SHOW COLLATION .\n\n- To make CREATE TABLE ... SELECT work the same way in statement based and row based replication it's by default executed as CREATE OR REPLACE TABLE on the replica.  One benefit of this is that if the replica dies in the middle of CREATE ... SELECT it will be able to continue. One can use the slave-ddl-exec-mode variable to specify how CREATE TABLE and DROP TABLE is replicated.\n\n- One can use the slave-ddl-exec-mode variable to specify how CREATE TABLE and DROP TABLE is replicated.\n\n- Users created with MySQL's SHA256 password algorithm cannot be used in MariaDB 11.2 - MDEV-9804 .\n\n- MariaDB 11.2 does not support Lateral Derived Tables - MDEV-19078 .\n\n- MariaDB 11.2 does not support CIDR notation for user accounts - MDEV-25515 .\n\n- MariaDB stores JSON as true text, not in binary format as MySQL. MariaDB's JSON functions are much faster than MySQL's so there is no need to store in binary format, which would add complexity when manipulating JSON objects.\n\n- For the same reason, MariaDB's JSON data type is an alias for LONGTEXT . If you want to replicate JSON columns from MySQL to MariaDB, you should store JSON objects in MySQL in a TEXT or LONGTEXT column or use statement-based replication. If you are using JSON columns and want to upgrade to MariaDB, use the mysql_json plugin to automatically convert MySQL JSON to TEXT, or alternatively you need to either convert them to TEXT or use mysqldump to copy these tables to MariaDB.\n\n- In MySQL, JSON is compared according to json values. In MariaDB JSON strings are normal strings and compared as strings.\n\n- MariaDB 11.2 does not support MySQL's JSON operators ( -> and ->> ) - MDEV-13594\n\n- MariaDB 11.2 supports the standard by producing null and a warning for JSON_SEARCH when given invalid data, while MySQL produces an error.\n\n- Roles MariaDB never allows authentication via roles, while MySQL permits this. MySQL permits activating multiple roles at the same time. MariaDB can achieve the same result by creating an intermediate aggregate role. In the INFORMATION_SCHEMA.ENABLED_ROLES table , MySQL reports just the direct list of enabled roles, while MariaDB reports the enabled role, plus the effective inherited roles. MySQL extends the INFORMATION_SCHEMA.APPLICABLE_ROLES table . MySQL includes the tables INFORMATION_SCHEMA.ROLE_TABLE_GRANTS, INFORMATION_SCHEMA.ROLE_ROUTINE_GRANTS, INFORMATION_SCHEMA.ROLE_COLUMN_GRANTS, and INFORMATION_SCHEMA ADMINISTRABLE_ROLE_AUTHORIZATIONS.\n\n- MariaDB never allows authentication via roles, while MySQL permits this.\n\n- MySQL permits activating multiple roles at the same time. MariaDB can achieve the same result by creating an intermediate aggregate role.\n\n- In the INFORMATION_SCHEMA.ENABLED_ROLES table , MySQL reports just the direct list of enabled roles, while MariaDB reports the enabled role, plus the effective inherited roles.\n\n- MySQL extends the INFORMATION_SCHEMA.APPLICABLE_ROLES table .\n\n- MySQL includes the tables INFORMATION_SCHEMA.ROLE_TABLE_GRANTS, INFORMATION_SCHEMA.ROLE_ROUTINE_GRANTS, INFORMATION_SCHEMA.ROLE_COLUMN_GRANTS, and INFORMATION_SCHEMA ADMINISTRABLE_ROLE_AUTHORIZATIONS.\n\n- MySQL has the performance schema enabled by default. For performance reasons MariaDB 11.2 has it disabled by default. You can enable it by starting mariadbd with the option --performance-schema .\n\n- MariaDB has removed the InnoDB Change Buffer .\n\n- In MariaDB 11.2 , using FLUSH TABLES without any table list will only close tables not in use, and tables not locked by the FLUSH TABLES connection. If there are no locked tables, FLUSH TABLES will be instant and will not cause any waits, as it no longer waits for tables in use. When a table list is provided, the server will wait for the end of any transactions that are using the tables. In MySQL, FLUSH TABLES only waits for the statements to complete.\n\n- MariaDB binaries ( mariadbd , myisamchk etc.) give a warning if one uses a unique prefix of an option (such as --big-table instead of --big-tables ). MySQL binaries require the full option name.\n\n- MariaDB 11.2 implements InnoDB encryption in a different way to MySQL 8.0.\n\n- MySQL's implementation of aborting statements that exceed a certain time to execute can only kill SELECTs, while MariaDB's can kill any queries (excluding stored procedures).\n\n- MariaDB 11.2 does not support MySQL's SELECT /*+ MAX_EXECUTION_TIME(n) */ ... - see Aborting Statements that Exceed a Certain Time to Execute .\n\n- MySQL 8.0 does not support the Query Cache .\n\n- MariaDB 11.2 does not support the MySQL Memcached plugin (which has been deprecated in MySQL 8.0). However, data stored using memcached can be retrieved because the data is stored as InnoDB tables. MariaDB is able to start successfully with an error message of not being able to find libmemcached.so library.\n\n- In MySQL, X'HHHH' , the standard SQL syntax for binary string literals, erroneously works in the same way as 0xHHHH , which could work as a number or string depending on the context. In MariaDB, this has been fixed to behave as a string in all contexts (and never as a number). See CAST and Hexadecimal Literals for more details and examples.\n\n- In MariaDB 11.2 , SHOW CREATE TABLE does not quote the DEFAULT value of an integer. MariaDB 10.2 and earlier, and MySQL, do. Since MariaDB can support defaults for BLOB and TEXT fields, while MySQL does not, SHOW CREATE TABLE will also append DEFAULT NULL where no default is explicitly provided to nullable BLOB or TEXT fields in MariaDB.\n\n- As a result of implementing Table Value Constructors , the VALUES function has been renamed to VALUE().\n\n- MariaDB's NOWAIT supports SELECT statements, LOCK TABLES and various DDL statements, while MySQL's NOWAIT only supports SELECT.\n\n- MariaDB's NOWAIT cannot be added on views and stored procedures while MySQL's can - MDEV-25247\n\n- MariaDB does not support RENAME table while it is write-locked - MDEV-30814\n\n- MariaDB returns an ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction when unable to lock within the time, while MySQL returns ERROR 3572 (HY000): Statement aborted because lock(s) could not be acquired immediately and NOWAIT is set\n\n- MariaDB does not support the optional init_vector argument for AES_ENCRYPT and AES_DECRYPT or the block_encryption_mode variable - MDEV-9069\n\n- MariaDB does not support the --initialize option. Use mariadb-install-db instead. - MDEV-19010\n\n- MariaDB 11.2 does not support the ngram and MeCab full-text parser plugins - MDEV-10267 , MDEV-10268 .\n\n- MariaDB 11.2 does not support the MySQL X plugin .\n\n- MariaDB 11.2 does not support CREATE TABLESPACE for InnoDB.\n\n- The MySQL 8.0 and MariaDB 11.2 INFORMATION_SCHEMA.COLUMNS table contain slightly different fields.\n\n- MariaDB 11.2 client executables allow the connection protocol to be forced by specifying only connection properties on the command-line. See mariadb Command-line client\n\n- The MySQL binary log includes the thread_id, while MariaDB's binary log does not - MDEV-7850\n\n- The MariaDB syntax supporting Spatial Reference System IDs for spatial data type columns with REF_SYSTEM_ID is not supported by MySQL. MySQL 8 introduced CREATE SPATIAL REFERENCE SYSTEM , which is not supported by MariaDB - MDEV-29953\n\n- MariaDB 11.2 does not support the RESTART statement - MDEV-30813\n\n- Compressing the binary log in MariaDB uses a different compression algorithm, and different system variables to manage.\n\n- MariaDB 11.2 does not support the SELECT FOR UPDATE and FOR SHARE locks - MDEV-17514\n\nFor protocol differences, see MariaDB protocol difference with MySQL ."}
{"url": "https://mariadb.com/kb/en/incompatibilities-and-feature-differences-between-mariadb-10-11-and-mysql-8/", "title": "Incompatibilities and Feature Differences Between MariaDB 10.11 and MySQL 8.0", "content": "### Contents\n\n- Storage Engines\n\n- Extensions and New Features\n\n- Incompatibilities\n\nMariaDB maintains high levels of compatibility with MySQL, and most applications that use MySQL will work seamlessly with MariaDB. However, take note of the following incompatibilities and feature differences between MariaDB 10.11 and MySQL 8.0. It is based on the versions MySQL 8.0.32 and MariaDB 10.11.2 . Note that MySQL 8 is an 'evergreen' release, so features may be added or removed in later releases.\n\n## Storage Engines\n\nIn addition to the standard InnoDB , MyISAM , BLACKHOLE , CSV , MEMORY , ARCHIVE , and MERGE storage engines, the following are also available with MariaDB 10.11 :\n\n- ColumnStore utilizes a massively parallel distributed data architecture and is designed for big data scaling to process petabytes of data.\n\n- MyRocks , a storage engine with great compression\n\n- S3 storage engine allows one to archive MariaDB tables in Amazon S3, or any third-party public or private cloud that implements S3 API.\n\n- Aria , MyISAM replacement with better caching.\n\n- CONNECT\n\n- SEQUENCE\n\n- Spider\n\n- SphinxSE\n\n- FederatedX (drop-in replacement for Federated)\n\n- OQGRAPH\n\n## Extensions and New Features\n\nThe most notable features available in MariaDB , but not in MySQL, are:\n\n- Galera is a standard part of MariaDB Server.\n\n- Temporal data tables in the form of: System-versioned tables (allow you to query and operate on historic data). Application-time periods (allow you to query and operate on a temporal range of data), including the WITHOUT OVERLAPS clause. Bitemporal tables (which combine both system-versioning and application-time periods).\n\n- System-versioned tables (allow you to query and operate on historic data).\n\n- Application-time periods (allow you to query and operate on a temporal range of data), including the WITHOUT OVERLAPS clause.\n\n- Bitemporal tables (which combine both system-versioning and application-time periods).\n\n- DML-only flashback , allowing instances, databases or tables to be rolled back to an old snapshot.\n\n- Oracle compatibility mode\n\n- MariaDB supports localization in a number of additional languages: Bulgarian, Chinese, Hindi, Serbian, and Ukrainian.\n\n- Sequences\n\n- Table Value Constructors\n\n- Dynamic Columns support\n\n- Semi-sync plugin merged into the server\n\n- OR REPLACE syntax for CREATE statements, such as CREATE OR REPLACE TABLE , CREATE OR REPLACE DATABASE , etc\n\n- DELETE ... RETURNING , INSERT ... RETURNING , REPLACE ... RETURNING\n\n- GRANT to PUBLIC - MDEV-5215 ( blog post )\n\n- WAIT syntax for setting the lock wait timeout.\n\n- UUID data type for storing UUIDs.\n\n- INET6 and INET4 data types for storing IPv6 and IPv4 addresses.\n\n- SUPER privileges made more granular.\n\n- PROXY protocol support\n\n- Multiple compression algorithms available as plugins\n\n- Number of supported decimals in DECIMAL has increased from 30 to 38\n\n- Number of parts of an index increased from 16 to 32 .\n\n- Added catchall for list partitions\n\n- Oracle-style EXECUTE IMMEDIATE statement\n\n- Lots of new JSON functions\n\n- Microsecond Precision in Processlist\n\n- Table Elimination\n\n- Virtual Columns\n\n- Extended User Statistics\n\n- KILL all queries for a user\n\n- Storage-engine-specific CREATE TABLE\n\n- MariaDB supports more collations (506) than MySQL (266).\n\n- FLUSH SSL command to reload SSL certificates without server restart.\n\n- IF NOT EXISTS clause added to INSTALL PLUGIN and IF EXISTS clause added to UNINSTALL PLUGIN and UNINSTALL SONAME\n\n- Enhancements to INFORMATION SCHEMA.PLUGINS table\n\n- Group commit for the binary log . This makes replication notably faster!\n\n- BACKUP STAGE allows one to implement very efficient backups with minimal locking.\n\n- Progress reporting for ALTER TABLE and LOAD DATA INFILE\n\n- SHOW EXPLAIN gives the EXPLAIN plan for a query running in another thread. MySQL introduced the EXPLAIN FOR CONNECTION syntax to do the same thing.\n\n- PCRE Regular Expressions (including REGEXP_REPLACE() )\n\n- HandlerSocket and faster HANDLER calls\n\n- MySQL 8 does not support PROCEDURE ANALYSE\n\n- MySQL 8 does not support the use of \\N as an alias for NULL\n\n## Incompatibilities\n\nWhen moving from MySQL 8.0 to MariaDB 10.11 , please take note of the following incompatibilities:\n\n- For a list of function differences, see Function Differences Between MariaDB 10.11 and MySQL 8.0\n\n- For a list of system variable differences, see System Variable Differences Between MariaDB 10.11 and MySQL 8.0\n\n- MariaDB does not support MySQL's SET PERSIST - MDEV-16228\n\n- MariaDB's GTID is not compatible with MySQL's. Note that MariaDB and MySQL also have different GTID system variables , so these need to be adjusted when migrating.\n\n- The unix_socket authentication plugin is now default on Unix-like systems, which is a major change to authentication in MariaDB. See Authentication from MariaDB 10.4 for an overview of the changes.\n\n- All mysql* binaries are now named mariadb* (the previous mysql named is retained as a symlink for compatibility purposes)\n\n- Not all character sets and collations are supported across both MySQL and MariaDB. As of 10.11, MariaDB supports 40 character sets and 506 collations . As of 8.0.32, MySQL supports 41 character sets ( gb18030 being the additional one - MDEV-7495 ) and 286 collations.\n\n- MariaDB indicates collation pad status as part of the name (e.g. utf8mb3_unicode_nopad_ci ), while MySQL indicates pad status by means of an extra column in SHOW COLLATION .\n\n- To make CREATE TABLE ... SELECT work the same way in statement based and row based replication it's by default executed as CREATE OR REPLACE TABLE on the slave.  One benefit of this is that if the slave dies in the middle of CREATE ... SELECT it will be able to continue. One can use the slave-ddl-exec-mode variable to specify how CREATE TABLE and DROP TABLE is replicated.\n\n- One can use the slave-ddl-exec-mode variable to specify how CREATE TABLE and DROP TABLE is replicated.\n\n- Users created with MySQL's SHA256 password algorithm cannot be used in MariaDB 10.11 - MDEV-9804 .\n\n- MariaDB 10.11 does not support Lateral Derived Tables - MDEV-19078 .\n\n- MariaDB 10.11 does not support CIDR notation for user accounts - MDEV-25515 .\n\n- MariaDB stores JSON as true text, not in binary format as MySQL. MariaDB's JSON functions are much faster than MySQL's so there is no need to store in binary format, which would add complexity when manipulating JSON objects.\n\n- For the same reason, MariaDB's JSON data type is an alias for LONGTEXT . If you want to replicate JSON columns from MySQL to MariaDB, you should store JSON objects in MySQL in a TEXT or LONGTEXT column or use statement-based replication. If you are using JSON columns and want to upgrade to MariaDB, use the mysql_json plugin to automatically convert MySQL JSON to TEXT, or alternatively you need to either convert them to TEXT or use mysqldump to copy these tables to MariaDB.\n\n- In MySQL, JSON is compared according to json values. In MariaDB JSON strings are normal strings and compared as strings.\n\n- MariaDB 10.11 does not support MySQL's JSON operators ( -> and ->> ) - MDEV-13594\n\n- MariaDB 10.11 supports the standard by producing null and a warning for JSON_SEARCH when given invalid data, while MySQL produces an error.\n\n- Roles MariaDB never allows authentication via roles, while MySQL permits this. MySQL permits activating multiple roles at the same time. MariaDB can achieve the same result by creating an intermediate aggregate role. In the INFORMATION_SCHEMA.ENABLED_ROLES table , MySQL reports just the direct list of enabled roles, while MariaDB reports the enabled role, plus the effective inherited roles. MySQL extends the INFORMATION_SCHEMA.APPLICABLE_ROLES table . MySQL includes the tables INFORMATION_SCHEMA.ROLE_TABLE_GRANTS, INFORMATION_SCHEMA.ROLE_ROUTINE_GRANTS, INFORMATION_SCHEMA.ROLE_COLUMN_GRANTS, and INFORMATION_SCHEMA ADMINISTRABLE_ROLE_AUTHORIZATIONS.\n\n- MariaDB never allows authentication via roles, while MySQL permits this.\n\n- MySQL permits activating multiple roles at the same time. MariaDB can achieve the same result by creating an intermediate aggregate role.\n\n- In the INFORMATION_SCHEMA.ENABLED_ROLES table , MySQL reports just the direct list of enabled roles, while MariaDB reports the enabled role, plus the effective inherited roles.\n\n- MySQL extends the INFORMATION_SCHEMA.APPLICABLE_ROLES table .\n\n- MySQL includes the tables INFORMATION_SCHEMA.ROLE_TABLE_GRANTS, INFORMATION_SCHEMA.ROLE_ROUTINE_GRANTS, INFORMATION_SCHEMA.ROLE_COLUMN_GRANTS, and INFORMATION_SCHEMA ADMINISTRABLE_ROLE_AUTHORIZATIONS.\n\n- MySQL has the performance schema enabled by default. For performance reasons MariaDB 10.11 has it disabled by default. You can enable it by starting mysqld with the option --performance-schema .\n\n- In MariaDB 10.11 , using FLUSH TABLES without any table list will only close tables not in use, and tables not locked by the FLUSH TABLES connection. If there are no locked tables, FLUSH TABLES will be instant and will not cause any waits, as it no longer waits for tables in use. When a table list is provided, the server will wait for the end of any transactions that are using the tables. In MySQL, FLUSH TABLES only waits for the statements to complete.\n\n- MariaDB binaries ( mysqld , myisamchk etc.) give a warning if one uses a unique prefix of an option (such as --big-table instead of --big-tables ). MySQL binaries require the full option name.\n\n- MariaDB 10.11 implements InnoDB encryption in a different way to MySQL 8.0.\n\n- MySQL's implementation of aborting statements that exceed a certain time to execute can only kill SELECTs, while MariaDB's can kill any queries (excluding stored procedures).\n\n- MariaDB 10.11 does not support MySQL's SELECT /*+ MAX_EXECUTION_TIME(n) */ ... - see Aborting Statements that Exceed a Certain Time to Execute .\n\n- MySQL 8.0 does not support the Query Cache .\n\n- MariaDB 10.11 does not support the MySQL Memcached plugin (which has been deprecated in MySQL 8.0). However, data stored using memcached can be retrieved because the data is stored as InnoDB tables. MariaDB is able to start successfully with an error message of not being able to find libmemcached.so library.\n\n- In MySQL, X'HHHH' , the standard SQL syntax for binary string literals, erroneously works in the same way as 0xHHHH , which could work as a number or string depending on the context. In MariaDB, this has been fixed to behave as a string in all contexts (and never as a number). See CAST and Hexadecimal Literals for more details and examples.\n\n- In MariaDB 10.11 , SHOW CREATE TABLE does not quote the DEFAULT value of an integer. MariaDB 10.2 and earlier, and MySQL, do. Since MariaDB can support defaults for BLOB and TEXT fields, while MySQL does not, SHOW CREATE TABLE will also append DEFAULT NULL where no default is explicitly provided to nullable BLOB or TEXT fields in MariaDB.\n\n- As a result of implementing Table Value Constructors , the VALUES function has been renamed to VALUE().\n\n- MariaDB's NOWAIT supports SELECT statements, LOCK TABLES and various DDL statements, while MySQL's NOWAIT only supports SELECT.\n\n- MariaDB's NOWAIT cannot be added on views and stored procedures while MySQL's can - MDEV-25247\n\n- MariaDB does not support RENAME table while it is write-locked - MDEV-30814\n\n- MariaDB returns an ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction when unable to lock within the time, while MySQL returns ERROR 3572 (HY000): Statement aborted because lock(s) could not be acquired immediately and NOWAIT is set\n\n- MariaDB does not support the optional init_vector argument for AES_ENCRYPT and AES_DECRYPT or the block_encryption_mode variable - MDEV-9069\n\n- MariaDB does not support the --initialize option. Use mariadb-install-db instead. - MDEV-19010\n\n- MariaDB 10.11 does not support the ngram and MeCab full-text parser plugins - MDEV-10267 , MDEV-10268 .\n\n- MariaDB 10.11 does not support the MySQL X plugin .\n\n- MariaDB 10.11 before MariaDB 10.11.5 does not support MySQL 8's “native” InnoDB partitioning handler - MDEV-29253\n\n- MariaDB 10.11 does not support CREATE TABLESPACE for InnoDB.\n\n- The MySQL 8.0 and MariaDB 10.11 INFORMATION_SCHEMA.COLUMNS table contain slightly different fields.\n\n- MariaDB 10.11 client executables allow the connection protocol to be forced by specifying only connection properties on the command-line. See mariadb Command-line client\n\n- The MySQL binary log includes the thread_id, while MariaDB's binary log does not - MDEV-7850\n\n- The MariaDB syntax supporting Spatial Reference System IDs for spatial data type columns with REF_SYSTEM_ID is not supported by MySQL. MySQL 8 introduced CREATE SPATIAL REFERENCE SYSTEM , which is not supported by MariaDB - MDEV-29953\n\n- MariaDB 10.11 does not support the RESTART statement - MDEV-30813\n\n- Compressing the binary log in MariaDB uses a different compression algorithm, and different system variables to manage.\n\n- MariaDB 10.11 does not support the SELECT FOR UPDATE and FOR SHARE locks - MDEV-17514\n\nFor protocol differences, see MariaDB protocol difference with MySQL ."}
{"url": "https://mariadb.com/kb/en/incompatibilities-and-feature-differences-between-mariadb-10-6-and-mysql-8-/", "title": "Incompatibilities and Feature Differences Between MariaDB 10.6 and MySQL 8.0", "content": "### Contents\n\n- Storage Engines\n\n- Extensions and New Features\n\n- Incompatibilities\n\nMariaDB maintains high levels of compatibility with MySQL, and most applications that use MySQL will work seamlessly with MariaDB. However, take note of the following incompatibilities and feature differences between MariaDB 10.6 and MySQL 8.0. It is based on the versions MySQL 8.0.25 and MariaDB 10.6.0 . Note that MySQL 8 is an 'evergreen' release, so features may be added or removed in later releases.\n\n## Storage Engines\n\nIn addition to the standard InnoDB , MyISAM , BLACKHOLE , CSV , MEMORY , ARCHIVE , and MERGE storage engines, the following are also available with MariaDB 10.6 :\n\n- ColumnStore utilizes a massively parallel distributed data architecture and is designed for big data scaling to process petabytes of data.\n\n- MyRocks , a storage engine with great compression\n\n- S3 storage engine allows one to archive MariaDB tables in Amazon S3, or any third-party public or private cloud that implements S3 API.\n\n- Aria , MyISAM replacement with better caching.\n\n- CONNECT\n\n- SEQUENCE\n\n- Spider\n\n- SphinxSE\n\n- FederatedX (drop-in replacement for Federated)\n\n- OQGRAPH\n\n## Extensions and New Features\n\nThe most notable features available in MariaDB , but not in MySQL, are:\n\n- Galera is a standard part of MariaDB Server.\n\n- Temporal data tables in the form of: System-versioned tables (allow you to query and operate on historic data). Application-time periods (allow you to query and operate on a temporal range of data), including the WITHOUT OVERLAPS clause. Bitemporal tables (which combine both system-versioning and application-time periods).\n\n- System-versioned tables (allow you to query and operate on historic data).\n\n- Application-time periods (allow you to query and operate on a temporal range of data), including the WITHOUT OVERLAPS clause.\n\n- Bitemporal tables (which combine both system-versioning and application-time periods).\n\n- DML-only flashback , allowing instances, databases or tables to be rolled back to an old snapshot.\n\n- Oracle compatibility mode\n\n- Sequences\n\n- Invisible Columns\n\n- Table Value Constructors\n\n- Dynamic Columns support\n\n- Semi-sync plugin merged into the server\n\n- INTERSECT/INTERSECT ALL and EXCEPT/EXCEPT ALL\n\n- OR REPLACE syntax for CREATE statements, such as CREATE OR REPLACE TABLE , CREATE OR REPLACE DATABASE , etc\n\n- DELETE ... RETURNING , INSERT ... RETURNING , REPLACE ... RETURNING\n\n- WAIT syntax for setting the lock wait timeout.\n\n- INET6 data type for storing IPv6 addresses.\n\n- SUPER privileges made more granular.\n\n- PROXY protocol support\n\n- Number of supported decimals in DECIMAL has increased from 30 to 38\n\n- Number of parts of an index increased from 16 to 32 .\n\n- Added catchall for list partitions\n\n- Oracle-style EXECUTE IMMEDIATE statement\n\n- Lots of new JSON functions\n\n- Microsecond Precision in Processlist\n\n- Table Elimination\n\n- Virtual Columns\n\n- Extended User Statistics\n\n- KILL all queries for a user\n\n- Storage-engine-specific CREATE TABLE\n\n- MariaDB supports more collations than MySQL, including NO PAD collations.\n\n- FLUSH SSL command to reload SSL certificates without server restart.\n\n- IF NOT EXISTS clause added to INSTALL PLUGIN and IF EXISTS clause added to UNINSTALL PLUGIN and UNINSTALL SONAME\n\n- Enhancements to INFORMATION SCHEMA.PLUGINS table\n\n- Group commit for the binary log . This makes replication notably faster!\n\n- BACKUP STAGE allows one to implement very efficient backups with minimal locking.\n\n- Progress reporting for ALTER TABLE and LOAD DATA INFILE\n\n- SHOW EXPLAIN gives the EXPLAIN plan for a query running in another thread. MySQL introduced the EXPLAIN FOR CONNECTION syntax to do the same thing.\n\n- PCRE Regular Expressions (including REGEXP_REPLACE() )\n\n- HandlerSocket and faster HANDLER calls\n\n- MySQL 8 does not support PROCEDURE ANALYSE\n\n- MySQL 8 does not support the use of \\N as an alias for NULL\n\n## Incompatibilities\n\nWhen moving from MySQL 8.0 to MariaDB 10.6 , please take note of the following incompatibilities:\n\n- For a list of function differences, see Function Differences Between MariaDB 10.6 and MySQL 8.0\n\n- For a list of system variable differences, see System Variable Differences Between MariaDB 10.6 and MySQL 8.0\n\n- MariaDB does not support MySQL's SET PERSIST - MDEV-16228\n\n- MariaDB's GTID is not compatible with MySQL's. Note that MariaDB and MySQL also have different GTID system variables , so these need to be adjusted when migrating.\n\n- The unix_socket authentication plugin is now default on Unix-like systems, which is a major change to authentication in MariaDB. See Authentication from MariaDB 10.4 for an overview of the changes.\n\n- All mysql* binaries are now named mariadb* (the previous mysql named is retained as a symlink for compatibility purposes)\n\n- Not all character sets and collations are supported across both MySQL and MariaDB. As of 10.6.0, MariaDB supports 40 character sets and 322 collations (armscii8_general_nopad_ci, armscii8_nopad_bin, ascbig5_chinese_nopad_ci, big5_nopad_bin, iicp1250_general_nopad_ci, cp1250_nopad_bin, cp1250_general_nopad_ci, cp1250_nopad_bin, cp1251_general_nopad_ci, cp1251_nopad_bin, cp1256_general_nopad_ci, cp1256_nopad_bin, cp1257_general_nopad_ci, cp1257_nopad_bin, cp850_general_nopad_ci, cp850_nopad_bin, cp852_general_nopad_ci, cp852_nopad_bin, cp866_general_nopad_ci, cp866_nopad_bin, cp932_japanese_nopad_ci, cp932_nopad_bin, dec8_nopad_bin, dec8_swedish_nopad_ci, eucjpms_japanese_nopad_ci, eucjpms_nopad_bin, eucjpms_japanese_nopad_ci, eucjpms_nopad_bin, euckr_korean_nopad_ci, euckr_nopad_bin, gb2312_chinese_nopad_ci, gb2312_nopad_bin, gbk_chinese_nopad_ci, gbk_nopad_bin, geostd8_general_nopad_ci, geostd8_nopad_bin, greek_general_nopad_ci, greek_nopad_bin, hebrew_general_nopad_ci, hebrew_nopad_bin, hp8_english_nopad_ci, hp8_nopad_bin, keybcs2_general_nopad_ci, keybcs2_nopad_bin, koi8r_general_nopad_ci, koi8r_nopad_bin, koi8u_general_nopad_ci, koi8u_nopad_bin, latin1_nopad_bin, latin1_swedish_nopad_ci, latin2_general_nopad_ci, latin2_nopad_bin, latin5_nopad_bin, latin5_turkish_ci, latin5_turkish_nopad_ci, latin7_general_nopad_ci, latin7_nopad_bin, macce_general_nopad_ci, macce_nopad_bin, macroman_general_nopad_ci, macroman_nopad_bin, sjis_japanese_nopad_ci, sjis_nopad_bin, swe7_nopad_bin, tis620_thai_nopad_ci, tis620_nopad_bin, ucs2_croatian_mysql561_ci, ucs2_general_mysql500_ci, ucs2_general_nopad_ci, ucs2_myanmar_ci, ucs2_nopad_bin, ucs2_swedish_ci, ucs2_thai_520_w2, ucs2_unicode_ci, ucs2_unicode_nopad_ci, ujis_japanese_nopad_ci, ujis_nopad_bin, utf16le_general_nopad_ci, utf16le_nopad_bin, utf16_croatian_mysql561_ci, utf16_general_nopad_ci, utf16_myanmar_ci, utf16_nopad_bin, utf16_thai_520_w2, utf16_unicode_520_nopad_ci, utf16_unicode_nopad_ci, utf32_croatian_mysql561_ci, utf32_general_nopad_ci, utf32_myanmar_ci, utf32_nopad_bin, utf32_thai_520_w2, utf32_unicode_520_nopad_ci, utf32_unicode_nopad_ci, utf8mb4_general_nopad_ci, utf8mb4_myanmar_ci, utf8mb4_nopad_bin, utf8mb4_thai_520_w2, utf8mb4_unicode_520_nopad_ci, utf8mb4_unicode_nopad_ci, utf8_croatian_mysql561_ci, utf8_general_nopad_ci, utf8_myanmar_ci, utf8_nopad_bin, utf8_thai_520_w2, utf8_unicode_520_nopad_ci, utf8_unicode_ci and utf8_unicode_nopad_ci  being the additional ones). As of 8.0.25, MySQL supports 41 character sets ( gb18030 being the additional one - MDEV-7495 ) and 272 collations (gb18030_bin, gb18030_chinese_ci, gb18030_unicode_520_ci, utf8mb4_0900_ai_ci, utf8mb4_0900_as_ci, utf8mb4_0900_as_cs, utf8mb4_0900_bin, utf8mb4_cs_0900_ai_ci, utf8mb4_cs_0900_as_cs, utf8mb4_da_0900_ai_ci, utf8mb4_da_0900_as_cs, utf8mb4_de_pb_0900_ai_ci, utf8mb4_de_pb_0900_as_cs, utf8mb4_eo_0900_ai_ci, utf8mb4_eo_0900_as_cs, utf8mb4_es_0900_ai_ci, utf8mb4_es_0900_as_cs, utf8mb4_es_trad_0900_ai_ci, utf8mb4_es_trad_0900_as_cs, utf8mb4_et_0900_ai_ci, utf8mb4_et_0900_as_cs, utf8mb4_hr_0900_ai_ci, utf8mb4_hr_0900_as_cs, utf8mb4_hu_0900_ai_ci, utf8mb4_hu_0900_as_cs, utf8mb4_is_0900_ai_ci, utf8mb4_is_0900_as_cs, utf8mb4_ja_0900_as_cs, utf8mb4_ja_0900_as_cs_ks, utf8mb4_la_0900_ai_ci, utf8mb4_la_0900_as_cs, utf8mb4_lt_0900_ai_ci, utf8mb4_lt_0900_as_cs, utf8mb4_lv_0900_ai_ci, utf8mb4_lv_0900_as_cs, utf8mb4_pl_0900_ai_ci, utf8mb4_pl_0900_as_cs, utf8mb4_ro_0900_ai_ci, utf8mb4_ro_0900_as_cs, utf8mb4_ru_0900_ai_ci, utf8mb4_ru_0900_as_cs, utf8mb4_sk_0900_ai_ci, utf8mb4_sk_0900_as_cs, utf8mb4_sl_0900_ai_ci, utf8mb4_sl_0900_as_cs, utf8mb4_sv_0900_ai_ci, utf8mb4_sv_0900_as_cs, utf8mb4_tr_0900_ai_ci, utf8mb4_vi_0900_ai_ci, utf8mb4_vi_0900_as_cs, utf8mb4_zh_0900_as_cs being the additional ones) - MDEV-20912 .\n\n- To make CREATE TABLE ... SELECT work the same way in statement based and row based replication it's by default executed as CREATE OR REPLACE TABLE on the slave.  One benefit of this is that if the slave dies in the middle of CREATE ... SELECT it will be able to continue. One can use the slave-ddl-exec-mode variable to specify how CREATE TABLE and DROP TABLE is replicated.\n\n- One can use the slave-ddl-exec-mode variable to specify how CREATE TABLE and DROP TABLE is replicated.\n\n- Users created with MySQL's SHA256 password algorithm cannot be used in MariaDB 10.6 - MDEV-9804 .\n\n- MariaDB 10.6 does not support CIDR notation for user accounts - MDEV-25515 .\n\n- MariaDB stores JSON as true text, not in binary format as MySQL. MariaDB's JSON functions are much faster than MySQL's so there is no need to store in binary format, which would add complexity when manipulating JSON objects.\n\n- For the same reason, MariaDB's JSON data type is an alias for LONGTEXT . If you want to replicate JSON columns from MySQL to MariaDB, you should store JSON objects in MySQL in a TEXT or LONGTEXT column or use statement-based replication. If you are using JSON columns and want to upgrade to MariaDB, use the mysql_json plugin to automatically convert MySQL JSON to TEXT, or alternatively you need to either convert them to TEXT or use mysqldump to copy these tables to MariaDB.\n\n- In MySQL, JSON is compared according to json values. In MariaDB JSON strings are normal strings and compared as strings.\n\n- MariaDB 10.6 does not support MySQL's JSON operators ( -> and ->> ) - MDEV-13594\n\n- MariaDB 10.6 supports the standard by producing null and a warning for JSON_SEARCH when given invalid data, while MySQL produces an error.\n\n- Roles MariaDB never allows authentication via roles, while MySQL permits this. MySQL permits activating multiple roles at the same time. MariaDB can achieve the same result by creating an intermediate aggregate role. In the INFORMATION_SCHEMA.ENABLED_ROLES table , MySQL reports just the direct list of enabled roles, while MariaDB reports the enabled role, plus the effective inherited roles. MySQL extends the INFORMATION_SCHEMA.APPLICABLE_ROLES table . MySQL includes the tables INFORMATION_SCHEMA.ROLE_TABLE_GRANTS, INFORMATION_SCHEMA.ROLE_ROUTINE_GRANTS, INFORMATION_SCHEMA.ROLE_COLUMN_GRANTS, and INFORMATION_SCHEMA ADMINISTRABLE_ROLE_AUTHORIZATIONS.\n\n- MariaDB never allows authentication via roles, while MySQL permits this.\n\n- MySQL permits activating multiple roles at the same time. MariaDB can achieve the same result by creating an intermediate aggregate role.\n\n- In the INFORMATION_SCHEMA.ENABLED_ROLES table , MySQL reports just the direct list of enabled roles, while MariaDB reports the enabled role, plus the effective inherited roles.\n\n- MySQL extends the INFORMATION_SCHEMA.APPLICABLE_ROLES table .\n\n- MySQL includes the tables INFORMATION_SCHEMA.ROLE_TABLE_GRANTS, INFORMATION_SCHEMA.ROLE_ROUTINE_GRANTS, INFORMATION_SCHEMA.ROLE_COLUMN_GRANTS, and INFORMATION_SCHEMA ADMINISTRABLE_ROLE_AUTHORIZATIONS.\n\n- MySQL has the performance schema enabled by default. For performance reasons MariaDB 10.6 has it disabled by default. You can enable it by starting mariadbd with the option --performance-schema .\n\n- In MariaDB 10.6 , using FLUSH TABLES without any table list will only close tables not in use, and tables not locked by the FLUSH TABLES connection. If there are no locked tables, FLUSH TABLES will be instant and will not cause any waits, as it no longer waits for tables in use. When a table list is provided, the server will wait for the end of any transactions that are using the tables. In MySQL, FLUSH TABLES only waits for the statements to complete.\n\n- MariaDB binaries ( mariadbd , myisamchk etc.) give a warning if one uses a unique prefix of an option (such as --big-table instead of --big-tables ). MySQL binaries require the full option name.\n\n- MariaDB 10.6 implements InnoDB encryption in a different way to MySQL 8.0.\n\n- MySQL's implementation of aborting statements that exceed a certain time to execute can only kill SELECTs, while MariaDB's can kill any queries (excluding stored procedures).\n\n- MariaDB 10.6 does not support MySQL's SELECT /*+ MAX_EXECUTION_TIME(n) */ ... - see Aborting Statements that Exceed a Certain Time to Execute .\n\n- MySQL 8.0 does not support the Query Cache .\n\n- MariaDB 10.6 does not support the MySQL Memcached plugin (which has been deprecated in MySQL 8.0). However, data stored using memcached can be retrieved because the data is stored as InnoDB tables. MariaDB is able to start successfully with an error message of not being able to find libmemcached.so library.\n\n- In MySQL, X'HHHH' , the standard SQL syntax for binary string literals, erroneously works in the same way as 0xHHHH , which could work as a number or string depending on the context. In MariaDB, this has been fixed to behave as a string in all contexts (and never as a number). See CAST and Hexadecimal Literals for more details and examples.\n\n- In MariaDB 10.6 , SHOW CREATE TABLE does not quote the DEFAULT value of an integer. MariaDB 10.2 and earlier, and MySQL, do. Since MariaDB can support defaults for BLOB and TEXT fields, while MySQL does not, SHOW CREATE TABLE will also append DEFAULT NULL where no default is explicitly provided to nullable BLOB or TEXT fields in MariaDB.\n\n- Since MariaDB supports INTERSECT and EXCEPT , these are both reserved words and can't be used as an identifier without being quoted.\n\n- As a result of implementing Table Value Constructors , the VALUES function has been renamed to VALUE().\n\n- MariaDB's NOWAIT supports SELECT statements, LOCK TABLES and various DDL statements, while MySQL's NOWAIT only supports SELECT.\n\n- MariaDB's NOWAIT cannot be added on views and stored procedures while MySQL's can - MDEV-25247\n\n- MariaDB returns an ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction when unable to lock within the time, while MySQL returns ERROR 3572 (HY000): Statement aborted because lock(s) could not be acquired immediately and NOWAIT is set\n\n- MariaDB does not support RENAME table while it is write-locked - MDEV-30814\n\n- MariaDB 10.6 does not support Lateral Derived Tables - MDEV-19078 .\n\n- MariaDB does not support the optional init_vector argument for AES_ENCRYPT and AES_DECRYPT or the block_encryption_mode variable - MDEV-9069\n\n- MariaDB does not support the --initialize option. Use mysql_install_db instead. - MDEV-19010\n\n- MariaDB 10.6 does not support the ngram and MeCab full-text parser plugins - MDEV-10267 , MDEV-10268 .\n\n- MariaDB 10.6 does not support the MySQL X plugin .\n\n- MariaDB 10.6 before MariaDB 10.6.15 does not support MySQL 8's “native” InnoDB partitioning handler - MDEV-29253\n\n- MariaDB 10.6 does not support CREATE TABLESPACE for InnoDB.\n\n- The MySQL 8.0 and MariaDB 10.6 INFORMATION_SCHEMA.COLUMNS table contain slightly different fields.\n\n- MariaDB 10.6 client executables allow the connection protocol to be forced by specifying only connection properties on the command-line. See mariadb Command-line client\n\n- The MySQL binary log includes the thread_id, while MariaDB's binary log does not - MDEV-7850\n\n- The MariaDB syntax supporting Spatial Reference System IDs for spatial data type columns with REF_SYSTEM_ID is not supported by MySQL. MySQL 8 introduced CREATE SPATIAL REFERENCE SYSTEM , which is not supported by MariaDB - MDEV-29953\n\n- MariaDB 10.6 does not support the RESTART statement - MDEV-30813\n\n- Compressing the binary log in MariaDB uses a different compression algorithm, and different system variables to manage.\n\n- MariaDB 10.6 does not support the SELECT FOR UPDATE and FOR SHARE locks - MDEV-17514\n\nFor protocol differences, see MariaDB protocol difference with MySQL ."}
{"url": "https://mariadb.com/kb/en/incompatibilities-and-feature-differences-between-mariadb-10-5-and-mysql-8-/", "title": "Incompatibilities and Feature Differences Between MariaDB 10.5 and MySQL 8.0", "content": "### Contents\n\n- Storage Engines\n\n- Extensions and New Features\n\n- Incompatibilities\n\nMariaDB maintains high levels of compatibility with MySQL, and most applications that use MySQL will work seamlessly with MariaDB. However, take note of the following incompatibilities and feature differences between MariaDB 10.5 and MySQL 8.0. It is based on the stable versions MySQL 8.0.22 and MariaDB 10.5.7 . Note that MySQL 8 is an 'evergreen' release, so features may be added or removed in later releases.\n\n## Storage Engines\n\nIn addition to the standard InnoDB , MyISAM , BLACKHOLE , CSV , MEMORY , ARCHIVE , and MERGE storage engines, the following are also available with MariaDB 10.5 :\n\n- ColumnStore utilizes a massively parallel distributed data architecture and is designed for big data scaling to process petabytes of data.\n\n- MyRocks , a storage engine with great compression\n\n- S3 storage engine allows one to archive MariaDB tables in Amazon S3, or any third-party public or private cloud that implements S3 API.\n\n- Aria , MyISAM replacement with better caching.\n\n- CONNECT\n\n- SEQUENCE\n\n- Spider\n\n- SphinxSE\n\n- FederatedX (drop-in replacement for Federated)\n\n- OQGRAPH\n\n## Extensions and New Features\n\nThe most notable features available in MariaDB , but not in MySQL, are:\n\n- Galera is a standard part of MariaDB Server.\n\n- Temporal data tables in the form of: System-versioned tables (allow you to query and operate on historic data). Application-time periods (allow you to query and operate on a temporal range of data), including the WITHOUT OVERLAPS clause added in 10.5. Bitemporal tables (which combine both system-versioning and application-time periods).\n\n- System-versioned tables (allow you to query and operate on historic data).\n\n- Application-time periods (allow you to query and operate on a temporal range of data), including the WITHOUT OVERLAPS clause added in 10.5.\n\n- Bitemporal tables (which combine both system-versioning and application-time periods).\n\n- DML-only flashback , allowing instances, databases or tables to be rolled back to an old snapshot.\n\n- Oracle compatibility mode\n\n- Sequences\n\n- Invisible Columns\n\n- Table Value Constructors\n\n- Dynamic Columns support\n\n- Semi-sync plugin merged into the server\n\n- INTERSECT/INTERSECT ALL and EXCEPT/EXCEPT ALL\n\n- OR REPLACE syntax for CREATE statements, such as CREATE OR REPLACE TABLE , CREATE OR REPLACE DATABASE , etc\n\n- DELETE ... RETURNING , INSERT ... RETURNING , REPLACE ... RETURNING\n\n- WAIT syntax for setting the lock wait timeout.\n\n- INET6 data type for storing IPv6 addresses.\n\n- SUPER privileges made more granular.\n\n- PROXY protocol support\n\n- Number of supported decimals in DECIMAL has increased from 30 to 38\n\n- Number of parts of an index increased from 16 to 32 .\n\n- Added catchall for list partitions\n\n- Oracle-style EXECUTE IMMEDIATE statement\n\n- Lots of new JSON functions\n\n- Microsecond Precision in Processlist\n\n- Table Elimination\n\n- Virtual Columns\n\n- Extended User Statistics\n\n- KILL all queries for a user\n\n- Storage-engine-specific CREATE TABLE\n\n- MariaDB supports more collations than MySQL, including NO PAD collations.\n\n- FLUSH SSL command to reload SSL certificates without server restart.\n\n- IF NOT EXISTS clause added to INSTALL PLUGIN and IF EXISTS clause added to UNINSTALL PLUGIN and UNINSTALL SONAME\n\n- Enhancements to INFORMATION SCHEMA.PLUGINS table\n\n- Group commit for the binary log . This makes replication notably faster!\n\n- BACKUP STAGE allows one to implement very efficient backups with minimal locking.\n\n- Progress reporting for ALTER TABLE and LOAD DATA INFILE\n\n- SHOW EXPLAIN gives the EXPLAIN plan for a query running in another thread. MySQL introduced the EXPLAIN FOR CONNECTION syntax to do the same thing.\n\n- PCRE Regular Expressions (including REGEXP_REPLACE() )\n\n- HandlerSocket and faster HANDLER calls\n\n- MySQL 8 does not support PROCEDURE ANALYSE\n\n- MySQL 8 does not support the use of \\N as an alias for NULL\n\n## Incompatibilities\n\nWhen moving from MySQL 8.0 to MariaDB 10.5 , please take note of the following incompatibilities:\n\n- For a list of function differences, see Function Differences Between MariaDB 10.5 and MySQL 8.0\n\n- For a list of system variable differences, see System Variable Differences Between MariaDB 10.5 and MySQL 8.0\n\n- MariaDB does not support MySQL's SET PERSIST - MDEV-16228\n\n- MariaDB's GTID is not compatible with MySQL's. Note that MariaDB and MySQL also have different GTID system variables , so these need to be adjusted when migrating.\n\n- The unix_socket authentication plugin is now default on Unix-like systems, which is a major change to authentication in MariaDB. See Authentication from MariaDB 10.4 for an overview of the changes.\n\n- All mysql* binaries are now named mariadb* (the previous mysql named is retained as a symlink for compatibility purposes)\n\n- Not all character sets and collations are supported across both MySQL and MariaDB. As of 10.5.4, MariaDB supports 40 character sets and 322 collations (armscii8_general_nopad_ci, armscii8_nopad_bin, ascbig5_chinese_nopad_ci, big5_nopad_bin, iicp1250_general_nopad_ci, cp1250_nopad_bin, cp1250_general_nopad_ci, cp1250_nopad_bin, cp1251_general_nopad_ci, cp1251_nopad_bin, cp1256_general_nopad_ci, cp1256_nopad_bin, cp1257_general_nopad_ci, cp1257_nopad_bin, cp850_general_nopad_ci, cp850_nopad_bin, cp852_general_nopad_ci, cp852_nopad_bin, cp866_general_nopad_ci, cp866_nopad_bin, cp932_japanese_nopad_ci, cp932_nopad_bin, dec8_nopad_bin, dec8_swedish_nopad_ci, eucjpms_japanese_nopad_ci, eucjpms_nopad_bin, eucjpms_japanese_nopad_ci, eucjpms_nopad_bin, euckr_korean_nopad_ci, euckr_nopad_bin, gb2312_chinese_nopad_ci, gb2312_nopad_bin, gbk_chinese_nopad_ci, gbk_nopad_bin, geostd8_general_nopad_ci, geostd8_nopad_bin, greek_general_nopad_ci, greek_nopad_bin, hebrew_general_nopad_ci, hebrew_nopad_bin, hp8_english_nopad_ci, hp8_nopad_bin, keybcs2_general_nopad_ci, keybcs2_nopad_bin, koi8r_general_nopad_ci, koi8r_nopad_bin, koi8u_general_nopad_ci, koi8u_nopad_bin, latin1_nopad_bin, latin1_swedish_nopad_ci, latin2_general_nopad_ci, latin2_nopad_bin, latin5_nopad_bin, latin5_turkish_ci, latin5_turkish_nopad_ci, latin7_general_nopad_ci, latin7_nopad_bin, macce_general_nopad_ci, macce_nopad_bin, macroman_general_nopad_ci, macroman_nopad_bin, sjis_japanese_nopad_ci, sjis_nopad_bin, swe7_nopad_bin, tis620_thai_nopad_ci, tis620_nopad_bin, ucs2_croatian_mysql561_ci, ucs2_general_mysql500_ci, ucs2_general_nopad_ci, ucs2_myanmar_ci, ucs2_nopad_bin, ucs2_swedish_ci, ucs2_thai_520_w2, ucs2_unicode_ci, ucs2_unicode_nopad_ci, ujis_japanese_nopad_ci, ujis_nopad_bin, utf16le_general_nopad_ci, utf16le_nopad_bin, utf16_croatian_mysql561_ci, utf16_general_nopad_ci, utf16_myanmar_ci, utf16_nopad_bin, utf16_thai_520_w2, utf16_unicode_520_nopad_ci, utf16_unicode_nopad_ci, utf32_croatian_mysql561_ci, utf32_general_nopad_ci, utf32_myanmar_ci, utf32_nopad_bin, utf32_thai_520_w2, utf32_unicode_520_nopad_ci, utf32_unicode_nopad_ci, utf8mb4_general_nopad_ci, utf8mb4_myanmar_ci, utf8mb4_nopad_bin, utf8mb4_thai_520_w2, utf8mb4_unicode_520_nopad_ci, utf8mb4_unicode_nopad_ci, utf8_croatian_mysql561_ci, utf8_general_nopad_ci, utf8_myanmar_ci, utf8_nopad_bin, utf8_thai_520_w2, utf8_unicode_520_nopad_ci, utf8_unicode_ci and utf8_unicode_nopad_ci  being the additional ones). As of 8.0.21, MySQL supports 41 character sets ( gb18030 being the additional one) and 272 collations (gb18030_bin, gb18030_chinese_ci, gb18030_unicode_520_ci, utf8mb4_0900_ai_ci, utf8mb4_0900_as_ci, utf8mb4_0900_as_cs, utf8mb4_0900_bin, utf8mb4_cs_0900_ai_ci, utf8mb4_cs_0900_as_cs, utf8mb4_da_0900_ai_ci, utf8mb4_da_0900_as_cs, utf8mb4_de_pb_0900_ai_ci, utf8mb4_de_pb_0900_as_cs, utf8mb4_eo_0900_ai_ci, utf8mb4_eo_0900_as_cs, utf8mb4_es_0900_ai_ci, utf8mb4_es_0900_as_cs, utf8mb4_es_trad_0900_ai_ci, utf8mb4_es_trad_0900_as_cs, utf8mb4_et_0900_ai_ci, utf8mb4_et_0900_as_cs, utf8mb4_hr_0900_ai_ci, utf8mb4_hr_0900_as_cs, utf8mb4_hu_0900_ai_ci, utf8mb4_hu_0900_as_cs, utf8mb4_is_0900_ai_ci, utf8mb4_is_0900_as_cs, utf8mb4_ja_0900_as_cs, utf8mb4_ja_0900_as_cs_ks, utf8mb4_la_0900_ai_ci, utf8mb4_la_0900_as_cs, utf8mb4_lt_0900_ai_ci, utf8mb4_lt_0900_as_cs, utf8mb4_lv_0900_ai_ci, utf8mb4_lv_0900_as_cs, utf8mb4_pl_0900_ai_ci, utf8mb4_pl_0900_as_cs, utf8mb4_ro_0900_ai_ci, utf8mb4_ro_0900_as_cs, utf8mb4_ru_0900_ai_ci, utf8mb4_ru_0900_as_cs, utf8mb4_sk_0900_ai_ci, utf8mb4_sk_0900_as_cs, utf8mb4_sl_0900_ai_ci, utf8mb4_sl_0900_as_cs, utf8mb4_sv_0900_ai_ci, utf8mb4_sv_0900_as_cs, utf8mb4_tr_0900_ai_ci, utf8mb4_vi_0900_ai_ci, utf8mb4_vi_0900_as_cs, utf8mb4_zh_0900_as_cs being the additional ones).\n\n- To make CREATE TABLE ... SELECT work the same way in statement based and row based replication it's by default executed as CREATE OR REPLACE TABLE on the slave.  One benefit of this is that if the slave dies in the middle of CREATE ... SELECT it will be able to continue. One can use the slave-ddl-exec-mode variable to specify how CREATE TABLE and DROP TABLE is replicated.\n\n- One can use the slave-ddl-exec-mode variable to specify how CREATE TABLE and DROP TABLE is replicated.\n\n- Users created with MySQL's SHA256 password algorithm cannot be used in MariaDB 10.5 - MDEV-9804 .\n\n- MariaDB stores JSON as true text, not in binary format as MySQL. MariaDB's JSON functions are much faster than MySQL's so there is no need to store in binary format, which would add complexity when manipulating JSON objects.\n\n- For the same reason, MariaDB's JSON data type is an alias for LONGTEXT . If you want to replicate JSON columns from MySQL to MariaDB, you should store JSON objects in MySQL in a TEXT or LONGTEXT column or use statement-based replication. If you are using JSON columns and want to upgrade to MariaDB, use the mysql_json plugin to automatically convert MySQL JSON to TEXT, or alternatively you need to either convert them to TEXT or use mysqldump to copy these tables to MariaDB.\n\n- In MySQL, JSON is compared according to json values. In MariaDB JSON strings are normal strings and compared as strings.\n\n- MariaDB 10.5 does not support MySQL's JSON operators ( -> and ->> ) - MDEV-13594\n\n- MariaDB 10.5 supports the standard by producing null and a warning for JSON_SEARCH when given invalid data, while MySQL produces an error.\n\n- Roles MariaDB never allows authentication via roles, while MySQL permits this. MySQL permits activating multiple roles at the same time. MariaDB can achieve the same result by creating an intermediate aggregate role. In the INFORMATION_SCHEMA.ENABLED_ROLES table , MySQL reports just the direct list of enabled roles, while MariaDB reports the enabled role, plus the effective inherited roles. MySQL extends the INFORMATION_SCHEMA.APPLICABLE_ROLES table . MySQL includes the tables INFORMATION_SCHEMA.ROLE_TABLE_GRANTS, INFORMATION_SCHEMA.ROLE_ROUTINE_GRANTS, INFORMATION_SCHEMA.ROLE_COLUMN_GRANTS, and INFORMATION_SCHEMA ADMINISTRABLE_ROLE_AUTHORIZATIONS.\n\n- MariaDB never allows authentication via roles, while MySQL permits this.\n\n- MySQL permits activating multiple roles at the same time. MariaDB can achieve the same result by creating an intermediate aggregate role.\n\n- In the INFORMATION_SCHEMA.ENABLED_ROLES table , MySQL reports just the direct list of enabled roles, while MariaDB reports the enabled role, plus the effective inherited roles.\n\n- MySQL extends the INFORMATION_SCHEMA.APPLICABLE_ROLES table .\n\n- MySQL includes the tables INFORMATION_SCHEMA.ROLE_TABLE_GRANTS, INFORMATION_SCHEMA.ROLE_ROUTINE_GRANTS, INFORMATION_SCHEMA.ROLE_COLUMN_GRANTS, and INFORMATION_SCHEMA ADMINISTRABLE_ROLE_AUTHORIZATIONS.\n\n- MySQL has the performance schema enabled by default. For performance reasons MariaDB 10.5 has it disabled by default. You can enable it by starting mariadbd with the option --performance-schema .\n\n- In MariaDB 10.5 , using FLUSH TABLES without any table list will only close tables not in use, and tables not locked by the FLUSH TABLES connection. If there are no locked tables, FLUSH TABLES will be instant and will not cause any waits, as it no longer waits for tables in use. When a table list is provided, the server will wait for the end of any transactions that are using the tables. In MySQL, FLUSH TABLES only waits for the statements to complete.\n\n- MariaDB binaries ( mariadbd , myisamchk etc.) give a warning if one uses a unique prefix of an option (such as --big-table instead of --big-tables ). MySQL binaries require the full option name.\n\n- MariaDB 10.5 implements InnoDB encryption in a different way to MySQL 8.0.\n\n- MySQL's implementation of aborting statements that exceed a certain time to execute can only kill SELECTs, while MariaDB's can kill any queries (excluding stored procedures).\n\n- MariaDB 10.5 does not support MySQL's SELECT /*+ MAX_EXECUTION_TIME(n) */ ... - see Aborting Statements that Exceed a Certain Time to Execute .\n\n- MySQL 8.0 does not support the Query Cache .\n\n- MariaDB 10.5 does not support the MySQL Memcached plugin (which has been deprecated in MySQL 8.0). However, data stored using memcached can be retrieved because the data is stored as InnoDB tables. MariaDB is able to start successfully with an error message of not being able to find libmemcached.so library.\n\n- In MySQL, X'HHHH' , the standard SQL syntax for binary string literals, erroneously works in the same way as 0xHHHH , which could work as a number or string depending on the context. In MariaDB, this has been fixed to behave as a string in all contexts (and never as a number). See CAST and Hexadecimal Literals for more details and examples.\n\n- In MariaDB 10.5 , SHOW CREATE TABLE does not quote the DEFAULT value of an integer. MariaDB 10.2 and earlier, and MySQL, do. Since MariaDB can support defaults for BLOB and TEXT fields, while MySQL does not, SHOW CREATE TABLE will also append DEFAULT NULL where no default is explicitly provided to nullable BLOB or TEXT fields in MariaDB.\n\n- Since MariaDB supports INTERSECT and EXCEPT , these are both reserved words and can't be used as an identifier without being quoted.\n\n- As a result of implementing Table Value Constructors , the VALUES function has been renamed to VALUE().\n\n- MariaDB's NOWAIT supports SELECT statements, LOCK TABLES and various DDL statements, while MySQL's NOWAIT only supports SELECT.\n\n- MariaDB's NOWAIT cannot be added on views and stored procedures while MySQL's can - MDEV-25247\n\n- MariaDB returns an ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction when unable to lock within the time, while MySQL returns ERROR 3572 (HY000): Statement aborted because lock(s) could not be acquired immediately and NOWAIT is set\n\n- MariaDB does not support RENAME table while it is write-locked - MDEV-30814\n\n- MariaDB 10.5 does not support Lateral Derived Tables - MDEV-19078 .\n\n- MariaDB does not support the optional init_vector argument for AES_ENCRYPT and AES_DECRYPT or the block_encryption_mode variable - MDEV-9069\n\n- MariaDB does not support the --initialize option. Use mysql_install_db instead. - MDEV-19010\n\n- MariaDB 10.5 does not support the ngram and MeCab full-text parser plugins - MDEV-10267 , MDEV-10268 .\n\n- MariaDB 10.5 does not support the MySQL X plugin .\n\n- MariaDB 10.5 does not support MySQL 8's “native” InnoDB partitioning handler - MDEV-29253\n\n- MariaDB 10.5 does not support CREATE TABLESPACE for InnoDB.\n\n- The MySQL 8.0 and MariaDB 10.5 INFORMATION_SCHEMA.COLUMNS table contain slightly different fields.\n\n- The MySQL binary log includes the thread_id, while MariaDB's binary log does not - MDEV-7850\n\n- The MariaDB 10.1 syntax supporting Spatial Reference System IDs for spatial data type columns with REF_SYSTEM_ID is not supported by MySQL. MySQL 8 introduced CREATE SPATIAL REFERENCE SYSTEM , which is not supported by MariaDB - MDEV-29953\n\n- MariaDB 10.5 does not support the RESTART statement - MDEV-30813\n\n- MariaDB 10.5 does not support the SELECT FOR UPDATE and FOR SHARE locks - MDEV-17514\n\n- Compressing the binary log in MariaDB uses a different compression algorithm, and different system variables to manage.\n\nFor protocol differences, see MariaDB protocol difference with MySQL .\n\n- Also see Incompatibilities between MariaDB 10.4 and MySQL 8.0 and Incompatibilities between MariaDB 10.3 and MySQL 5.7 ."}
{"url": "https://mariadb.com/kb/en/optimizer-feature-comparison-matrix/", "title": "Optimizer Feature Comparison Matrix", "content": "The below is a table view.  For a more graphical view of the differences see What is the difference between MySQL and MariaDB query optimizers ."}
{"url": "https://mariadb.com/kb/en/differences-between-the-mysql-and-mariadb-query-optimizer/", "title": "Differences Between the MySQL and MariaDB Query Optimizer", "content": "This is an overview of query optimizer feature development in recent versions of MariaDB (5.5, 10.0) and MySQL (5.6).\n\nTo make things easier to understand, let's first partition the optimizer into areas:\n\n\n\nLet's look at things in historical order. There is no known evidence of the use of SQL query optimization by ancient Egyptians. In April 2012, MariaDB 5.3 and MariaDB 5.5 became stable. (5.5 was a merge of 5.3 with MySQL 5.5). The 5.3/5.5 release included a number of new major query optimizer features:\n\n\n\nThe size of the bubble roughly corresponds to the impact of the feature (in opinion of the author of this article). \"Hash join\" is in quotes, because this feature is not what is generally meant by hash join in the world of databases. Smaller features and bugfixes are not shown.\n\nIn February, 2013, MySQL 5.6 had its first stable release. It had a number of new major optimizer features. Some of them had common ancestry with MariaDB's features, and some of them were new development:\n\n\n\nIn April, 2014, MariaDB 10.0 became stable.  As compared to MariaDB 5.5 , it had some features that were backported from MySQL 5.6,  and also some new features were implemented:\n\n\n\nOne can see that\n\n- MariaDB has features that MySQL doesn't have\n\n- However, some MySQL 5.6 features were not ported into MariaDB 10.0 .\n\nThe MariaDB team is frequently asked if all features (or feature X) from MySQL 5.6 are available in MariaDB, so here's our position on the features that have not [yet] been backported:\n\n- EXPLAIN FORMAT=JSON - This is available in MariaDB Server 10.1. Please read the documentation to know more.\n\n- Optimizer trace - we have doubts whether the feature is usable in its current form.  For simple queries, it's easier to analyze using other means, for complex queries the size of the trace grows beyond any limit.  We're looking for input re. how optimizer trace was (or could be) useful to somebody in a real-world setting.\n\n- Faster optimization for eq_ref - we believe that the optimization is useful but its implementation in MySQL uses a wrong approach.\n\n## See also\n\n- EXPLAIN FORMAT=JSON in MySQL 5.6 EXPLAIN FORMAT=JSON vs regular EXPLAIN Engineering behind EXPLAIN FORMAT=JSON (or lack thereof)\n\n- EXPLAIN FORMAT=JSON vs regular EXPLAIN\n\n- Engineering behind EXPLAIN FORMAT=JSON (or lack thereof)\n\n- SHOW EXPLAIN in MariaDB 10.0 SHOW EXPLAIN in MariaDB 10.0 vs EXPLAIN FOR CONNECTION in MySQL 5.7\n\n- SHOW EXPLAIN in MariaDB 10.0 vs EXPLAIN FOR CONNECTION in MySQL 5.7"}
{"url": "https://mariadb.com/kb/en/sql_modeoracle/", "title": "SQL_MODE=ORACLE", "content": "From MariaDB 10.3, MariaDB's SQL_MODE = ORACLE setting enables compatibility with Oracle Database SQL syntax and behavior in MariaDB. This feature is particularly useful for organizations looking to migrate applications from Oracle Database to MariaDB while preserving the behavior and syntax of Oracle SQL. By setting the sql_mode to ORACLE, developers can ensure that their existing SQL scripts, application logic, and database interactions are compatible with MariaDB's behavior, easing the migration process. This page provides detailed information on supported Oracle SQL syntax, behavior differences between Oracle and MariaDB, and tips for adapting applications and scripts to work smoothly under this mode.\n\n```\nSET SQL_MODE='ORACLE';\n```\n\nAll traditional MariaDB SQL/PSM syntax should work as before, as long as it does not conflict with Oracle's PL/SQL syntax. All MariaDB functions should be supported in both normal and Oracle modes.\n\nPrior to MariaDB 10.3 , MariaDB does not support Oracle's PL/SQL language, and SET SQL_MODE=ORACLE is only an alias for the following sql_mode in those versions:\n\n```\nSET SQL_MODE='PIPES_AS_CONCAT, ANSI_QUOTES, IGNORE_SPACE, NO_KEY_OPTIONS,\nNO_TABLE_OPTIONS, NO_FIELD_OPTIONS, NO_AUTO_CREATE_USER';\n```\n\nFrom MariaDB 10.3 , SET SQL_MODE=ORACLE is same as:\n\n```\nSET SQL_MODE='PIPES_AS_CONCAT,ANSI_QUOTES,IGNORE_SPACE,ORACLE,NO_KEY_OPTIONS,\nNO_TABLE_OPTIONS,NO_FIELD_OPTIONS,NO_AUTO_CREATE_USER,SIMULTANEOUS_ASSIGNMENT';\n```\n\n### Contents\n\n- Supported Syntax in Oracle Mode Stored Procedures and Stored Functions Cursors LOOP Variables Exceptions BEGIN Blocks Simple Syntax Compatibility Functions Prepared Statements Synonyms for Basic SQL Types Packages NULL Handling NULL As a Statement Translating Empty String Literals to NULL Concat Operator Ignores NULL Reserved Words SHOW CREATE TABLE\n\n- Stored Procedures and Stored Functions\n\n- Cursors\n\n- LOOP\n\n- Variables\n\n- Exceptions\n\n- BEGIN Blocks\n\n- Simple Syntax Compatibility\n\n- Functions\n\n- Prepared Statements\n\n- Synonyms for Basic SQL Types\n\n- Packages\n\n- NULL Handling NULL As a Statement Translating Empty String Literals to NULL Concat Operator Ignores NULL\n\n- NULL As a Statement\n\n- Translating Empty String Literals to NULL\n\n- Concat Operator Ignores NULL\n\n- Reserved Words\n\n- SHOW CREATE TABLE\n\n- See Also\n\n## Supported Syntax in Oracle Mode\n\n### Stored Procedures and Stored Functions\n\nOracle mode makes the following changes to Stored Procedures and Stored Functions :\n\n### Cursors\n\nOracle mode makes the following changes to Cursors :\n\n### LOOP\n\nOracle mode makes the following changes to LOOP :\n\n### Variables\n\n### Exceptions\n\n### BEGIN Blocks\n\n### Simple Syntax Compatibility\n\n### Functions\n\n### Prepared Statements\n\nOracle mode makes the following changes to Prepared Statements :\n\n### Synonyms for Basic SQL Types\n\nThis was implemented as part of MDEV-10343 .\n\nIf one does a SHOW CREATE TABLE in ORACLE mode on a table that has a native MariaDB DATE column, it will be displayed as mariadb_schema.date to not conflict with the Oracle DATE type.\n\n### Packages\n\nThe following syntax has been supported since MariaDB 10.3.5 :\n\n- CREATE PACKAGE\n\n- CREATE PACKAGE BODY\n\n- DROP PACKAGE\n\n- DROP PACKAGE BODY\n\n- SHOW CREATE PACKAGE\n\n- SHOW CREATE PACKAGE BODY\n\n### NULL Handling\n\nOracle mode makes the following changes to NULL handling :\n\n#### NULL As a Statement\n\nNULL can be used as a statement:\n\n```\nIF a = 10 THEN NULL ; ELSE NULL ; END IF\n```\n\n#### Translating Empty String Literals to NULL\n\nIn Oracle, empty string ('') and NULL are the same thing,\n\nBy using sql_mode=EMPTY_STRING_IS_NULL you can get a similar\nexperience in MariaDB:\n\n```\nSET sql_mode = EMPTY_STRING_IS_NULL ; SELECT '' IS NULL ; -- returns TRUE INSERT INTO t1 VALUES ( '' ); -- inserts NULL\n```\n\n#### Concat Operator Ignores NULL\n\nCONCAT() and || ignore NULL in Oracle mode. Can also be accessed outside of ORACLE mode by using CONCAT_OPERATOR_ORACLE. MDEV-11880 and MDEV-12143 .\n\n### Reserved Words\n\nThere are a number of extra reserved words in Oracle mode.\n\n### SHOW CREATE TABLE\n\nThe SHOW CREATE TABLE statement will not display MariaDB-specific table options, such as AUTO_INCREMENT or CHARSET, when Oracle mode is set.\n\n## See Also\n\n- mariadb_schema\n\n- Using SEQUENCEs\n\n- SQL_MODE EMPTY_STRING_IS_NULL\n\n- SQL_MODE=MSSQL\n\n- Migration from Oracle to MariaDB with no application change - Pickup Li - FOSDEM 2021 (video)\n\n- A user story: migrating from Oracle to MariaDB - Lixun Peng - MariaDB Server Fest 2020 (video)\n\n- Curious case of the disappearing commercial databases (13 minute offset) - Monty Widenius - MariaDB Server Fest 2021 (video)\n\n- Sqlines - Oracle to MariaDB migration tool"}
{"url": "https://mariadb.com/kb/en/oracle-xe-112-and-mariadb-101-integration-on-ubuntu-1404-and-debian-systems/", "title": "Oracle XE 11.2. and MariaDB 10.1 integration on Ubuntu 14.04 and Debian systems", "content": "### Contents\n\n- MariaDB\n\n- Connect to MariaDB via JDBC\n\n1) Sign up for Oracle downloads and download Oracle Express at:\n\nhttp://www.oracle.com/technetwork/database/database-technologies/express-edition/downloads/index.html\n\n- Sign up (unless already) and log in.\n- Accept the license agreement.\n- Download Oracle Database Express Edition 11g Release 2 for Linux x64\n(oracle-xe-11.2.0-1.0.x86_64.rpm.zip, version numbers may change over time)\n\n2) Prepare apt-get on your system\n\n```\nsudo add-apt-repository ppa:webupd8team/java\n<press Enter to accept>\nsudo apt-get update\nsudo apt-get install oracle-java8-installer\n```\n\n3) After Java installation, verify the version\n\n```\njava -version\njava version \"1.8.0_121\"\n```\n\n4) Edit /etc/bash.bashrc\n\nScroll to the bottom of the file and add the following lines.\n\n```\nexport JAVA_HOME=/usr/lib/jvm/java-8-oracle\nexport PATH=$JAVA_HOME/bin:$PATH\n```\n\nSave and check:\n\n```\nsource /etc/bash.bashrc\necho $JAVA_HOME\n/usr/lib/jvm/java-8-oracle\n```\n\n5) Additional packages are required, unless installed already. Run the command:\n\n```\nsudo apt-get install alien libaio1 unixodbc\n```\n\n6)\n\n```\nunzip oracle-xe-11.2.0-1.0.x86_64.rpm.zip\ncd Disk1/\nsudo alien --scripts -d oracle-xe-11.2.0-1.0.x86_64.rpm\n```\n\nThis step might take some time. You may proceed steps 7)-11)\nin the meanwhile in another terminal window.\n\n7)\n\nCreate a new file /sbin/chkconfig and add the following contents\n\n```\n#!/bin/bash\n# Oracle 11gR2 XE installer chkconfig for Ubuntu\nfile=/etc/init.d/oracle-xe\nif [[ ! `tail -n1 $file | grep INIT` ]]; then\necho >> $file\necho '### BEGIN INIT INFO' >> $file\necho '# Provides: OracleXE' >> $file\necho '# Required-Start: $remote_fs $syslog' >> $file\necho '# Required-Stop: $remote_fs $syslog' >> $file\necho '# Default-Start: 2 3 4 5' >> $file\necho '# Default-Stop: 0 1 6' >> $file\necho '# Short-Description: Oracle 11g Express Edition' >> $file\necho '### END INIT INFO' >> $file\nfi\nupdate-rc.d oracle-xe defaults 80 01\n#EOF\n```\n\n8)\n\n```\nsudo chmod 755 /sbin/chkconfig\n```\n\n9)\n\nCreate a new file /etc/sysctl.d/60-oracle.conf\n\nCopy and paste the following into the file. Kernel.shmmax is the\nmaximum possible value of physical RAM in bytes. 536870912 / 1024\n/1024 = 512 MB.\n\n```\n#Oracle 11g XE kernel parameters  \nfs.file-max=6815744  \nnet.ipv4.ip_local_port_range=9000 65000  \nkernel.sem=250 32000 100 128 \nkernel.shmmax=536870912\n```\n\n10)\n\n```\nsudo service procps start\nsudo sysctl -q fs.file-max\n```\n\n- This method should return the following:\nfs.file-max = 6815744\n\n11) Some additional steps required\n\n```\nsudo ln -s /usr/bin/awk /bin/awk\nmkdir /var/lock/subsys\ntouch /var/lock/subsys/listener\n```\n\n12) Install Oracle XE (should have been converted from .rpm to .deb by now)\n\n```\nsudo dpkg --install oracle-xe_11.2.0-2_amd64.deb\n```\n\n13)\n\nExecute the  following  to avoid getting  a ORA-00845: MEMORY_TARGET\nerror. Note: replace \"size=4096m\" with the size of your (virtual)\nmachine RAM in MBs.\n\n```\nsudo rm -rf /dev/shm\nsudo mkdir /dev/shm\nsudo mount -t tmpfs shmfs -o size=4096m /dev/shm\n```\n\n14) Create the file /etc/rc2.d/S01shm_load\n\nNOTE: replace \"size=4096m\"\nwith the size of your machine RAM in MBS.\n\n```\n#!/bin/sh\ncase \"$1\" in\nstart) mkdir /var/lock/subsys 2>/dev/null\ntouch /var/lock/subsys/listener\nrm /dev/shm 2>/dev/null\nmkdir /dev/shm 2>/dev/null\nmount -t tmpfs shmfs -o size=4096m /dev/shm ;;\n*) echo error\nexit 1 ;;\nesac\n```\n\n```\nsudo chmod 755 /etc/rc2.d/S01shm_load\n```\n\n15) Configure Oracle 11g R2 Express Edition. Default answers are probably OK.\n\n```\nsudo /etc/init.d/oracle-xe configure\n```\n\nSpecify the HTTP port that will be used for Oracle Application Express [8080]:\n\nSpecify a port that will be used for the database listener [1521]:\n\nSpecify a password to be used for database accounts.  Note that the same\npassword will be used for SYS and SYSTEM.  Oracle recommends the use of \ndifferent passwords for each database account.  This can be done after \ninitial configuration:\n\nDo you want Oracle Database 11g Express Edition to be started on boot (y/n) [y]:\n\n16) Edit /etc/bash.bashrc. Add to the end of the file:\n\n```\nexport ORACLE_HOME=/u01/app/oracle/product/11.2.0/xe\nexport ORACLE_SID=XE\nexport NLS_LANG=`$ORACLE_HOME/bin/nls_lang.sh`\nexport ORACLE_BASE=/u01/app/oracle\nexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:$LD_LIBRARY_PATH\nexport PATH=$ORACLE_HOME/bin:$PATH\n```\n\nSave.\n\n17) Run source command and check that the output makes sense\n\n```\nsource /etc/bash.bashrc\necho $ORACLE_HOME\n/u01/app/oracle/product/11.2.0/xe\n```\n\n18) Apply desktop icon changes and start Oracle:\n\n```\nsudo chmod a+x ~/Desktop/oraclexe-gettingstarted.desktop\nsudo service oracle-xe start\n```\n\n19) Download SQL Developer package\n\nDownload Oracle SQL Developer from the Oracle site. Select the Linux\nRPM package: http://www.oracle.com/technetwork/developer-tools/sql-developer/downloads/index.html\n\nChoose the Linux RPM package.\n\n20) Install SQL Developer\n\n```\nsudo alien --scripts -d sqldeveloper-4.1.5.21.78-1.noarch.rpm\nsudo dpkg --install sqldeveloper_4.1.5.21.78-2_all.deb\nmkdir ~/.sqldeveloper\n```\n\n21) Run sqldeveloper:\n\n```\nsudo /opt/sqldeveloper/sqldeveloper.sh\n```\n\n- Tell sqldeveloper the correct Java path, if it asks for it:\n\n/usr/lib/jvm/java-8-oracle\n\n```\n- Click connections\n- Add new connection\n- Connection name: XE\n- username: SYSTEM\n- password: <your-password>\n\n- Connection type: Basic Role: Default\n- Hostname: localhost\n- Port: 1521\n- SID: xe\n```\n\n## MariaDB\n\n22) Install MariaDB\n\nhttps://downloads.mariadb.org/mariadb/repositories/ Instructions are for Ubuntu, but choose the one that is appropriate:\n- Ubuntu\n- 14.04 LTS \"trusty\"\n- 10.1 [Stable]\n- choose a mirror\n\nRun the commands given for you. For example (DO NOT COPY PASTE BELOW, CHECK WHAT THE MariaDB PAGE TELLS YOU TO DO):\n\n```\nsudo apt-get install software-properties-common\nsudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xcbcb082a1bb943db\nsudo add-apt-repository 'deb [arch=amd64,i386,ppc64el] http://mirror.netinch.com/pub/mariadb/repo/10.1/ubuntu trusty main'\nsudo apt-get update\n```\n\n- Install mariadb-server:\n\n```\nsudo apt-get install mariadb-server\n```\n\n23) Install ODBC driver\n\nhttps://downloads.mariadb.org/connector-odbc/\n\n- MariaDB Connector/ODBC 2.0.13 Stable for Linux\n\nDownload: mariadb-connector- ODBC-2 .0.13-ga-linux-x86_64.tar.gz\n\n```\ntar xfz mariadb-connector-odbc-2.0.13-ga-linux-x86_64.tar.gz\nsudo cp -p mariadb-connector-odbc-2.0.13-ga-linux-x86_64/lib/libmaodbc.so /lib\nsudo ldconfig\n```\n\n24) Install unixodbc and mariadb-connect engine\n\n```\napt-get install unixodbc-dev\napt-get install unixodbc-bin\napt-get install unixodbc\napt-get install libodbc1\napt-get install mariadb-connect-engine-10.1\n```\n\n25) Edit /etc/odbcinst.ini\n\nAdd:\n\n```\n[Oracle ODBC driver for Oracle 11.2]\nDescription     = Oracle 11.2 ODBC driver\nDriver          = /u01/app/oracle/product/11.2.0/xe/lib/libsqora.so.11.1\n```\n\n26) Edit /etc/odbc.ini\n\nAdd (check your password):\n\n```\n[XE]\nDriver          = Oracle ODBC driver for Oracle 11.2\nServerName      = //localhost:1521/xe\nDSN             = XE\nUserName        = SYSTEM\nPassword        = <your-password>\n```\n\n27) Test ODBC connection and add a table\n\n```\nisql -v XE SYSTEM <your-password>\n\ncreate table t1 (i int);\ninsert into t1 (i) values (1);\ninsert into t1 (i) values (3);\ninsert into t1 (i) values (5);\ninsert into t1 (i) values (8);\nselect i from t1;\n```\n\nAnd you should see the rows. You can test the\nsame with sqldeveloper, open XE connection and run\nselect i from t1; in Worksheet.\n\n28) Edit /etc/init.d/mysql\n\nAdd:\n\n```\nexport JAVA_HOME=/usr/lib/jvm/java-8-oracle \nexport PATH=$JAVA_HOME/bin:$PATH \nexport ORACLE_HOME=/u01/app/oracle/product/11.2.0/xe \nexport CLIENT_HOME=$ORACLE_HOME \nexport ORACLE_SID=XE \nexport NLS_LANG=`$ORACLE_HOME/bin/nls_lang.sh` \nexport ORACLE_BASE=/u01/app/oracle \nexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:$LD_LIBRARY_PATH \nexport PATH=$ORACLE_HOME/bin:$PATH\n```\n\nRight after END INIT INFO. Otherwise mysqld will not find the Oracle ODBC driver.\n\n28) Restart MariaDB\n\n```\nsudo /etc/init.d/mysql restart\n```\n\n29)\n\n```\nmysql -uroot -p\n\nCREATE DATABASE mdb;\nUSE mdb;\nINSTALL SONAME 'ha_connect';\nCREATE TABLE t1 ENGINE=CONNECT TABLE_TYPE=ODBC tabname='T1' CONNECTION='DSN=XE;UID=SYSTEM;PWD=<your-password>';\n\nselect I from t1;\n```\n\nYou should see the previously inserted values 1,3,5 and 8.\nUsing isql or sqldeveloper, add another rows with values 9 and 11.\nRemember to commit, if you are using Oracle sqldeveloper. You should now see\nthe added values via MariaDB client (mysql-client) connection.\n\nTo be examined: inserting values to the t1 table from mariadb connection\ndoes not work. It gives a precision error from Oracle side.\n\n## Connect to MariaDB via JDBC\n\nDownload MySQL Connector from https://dev.mysql.com/downloads/connector/j/5.0.html\n\nSelect Version (for example 5.0.8)\n\nPlatform independent. Download mysql-connector-java-5.0.8.tar.gz\n\n```\ntar xvfz mysql-connector-java-5.0.8.tar.gz\ncd mysql-connector-java-5.0.8/\nsudo cp -p mysql-connector-java-5.0.8-bin.jar /usr/lib/jvm/java-8-oracle/lib/mariadb/\n\nsudo /opt/sqldeveloper/sqldeveloper.sh\n```\n\nIn SQL Developer choose Tools -> Preferences\n\nExpand the \"Database\" option in the left hand tree\n\nClick on \"Third Party JDBC Drivers\"\n\nClick on \"Add Entry...\"\n\nNavigate to your third-party driver jar file and choose OK\n\n/usr/lib/jvm/java-8-oracle/lib/mariadb/mysql-connector-java-5.0.8-bin.jar\n\nClick Connections -> New connection.\n\nAdd values. The following are examples:\n\n```\nConnection Name: MariaDB via MySQL Conn\nUsername: root\nPassword: ********\nSave Password: [x]\n\nChoose MySQL tab\n\nHostname: localhost\nPort: 3306\n\nClick \"Test Connection\". It should says Status: Success.\nClick Save.\nClick Connect.\n```\n\nYou are connected. You may run commands in the Worksheet.\nFor example:\n\nuse mdb;\n\nshow tables;\n\nYou should see the tables."}
